data = cur_data_all()
SoilTopThickness = data$SoilTopThickness[row]
WiltingPoint = data$WiltingPoint[row]
#Eq. 2.2.1-23 to 2.2.1-24
VolSoilWaterContent = WaterStorage_dprev/SoilTopThickness
if (VolSoilWaterContent == 0) {
VolSoilWaterContent = WiltingPoint
}
return(VolSoilWaterContent)
}))
return(VolSoilWaterContent$d)
}
calculateVolSoilWaterContent(daily_input_test)
WiltingPoint
daily_input_test$WiltingPoint
daily_input_test$SoilTopThickness
calculateVolSoilWaterContent <- function(InputTable) {
#Input should be a df/tibble with the columns
#JulianDay (int) (these values need to be contiguous or else the function doesn't work),
#SoilTopThickness (float)
#WiltingPoint (float)
VolSoilWaterContent = InputTable %>%
#Subtract JulianDay by its first value to get 0.
#Since accumulate() takes .init from .x[[1]], this sets the initial value to 0 (Eq. 2.2.1-15).
mutate(d = accumulate(.x = JulianDay-first(JulianDay), .f=function(WaterStorage_dprev, row) {
data = cur_data_all()
SoilTopThickness = data$SoilTopThickness[row]
WiltingPoint = data$WiltingPoint[row]
#Eq. 2.2.1-23 to 2.2.1-24
VolSoilWaterContent = WaterStorage_dprev/SoilTopThickness
if (VolSoilWaterContent == 0) {
VolSoilWaterContent = WiltingPoint
}
return(VolSoilWaterContent)
}))
return(VolSoilWaterContent$d)
}
calculateVolSoilWaterContent(daily_input_test)
calculateVolSoilWaterContent <- function(InputTable) {
#Input should be a df/tibble with the columns
#JulianDay (int) (these values need to be contiguous or else the function doesn't work),
#SoilTopThickness (float)
#WiltingPoint (float)
VolSoilWaterContent = InputTable %>%
#Subtract JulianDay by its first value to get 0.
#Since accumulate() takes .init from .x[[1]], this sets the initial value to 0 (Eq. 2.2.1-15).
mutate(d = accumulate(.x = JulianDay-first(JulianDay), .f=function(WaterStorage_dprev, row) {
data = cur_data_all()
print("asdfas")
SoilTopThickness = data$SoilTopThickness[row]
WiltingPoint = data$WiltingPoint[row]
#Eq. 2.2.1-23 to 2.2.1-24
VolSoilWaterContent = WaterStorage_dprev/SoilTopThickness
if (VolSoilWaterContent == 0) {
VolSoilWaterContent = WiltingPoint
}
return(VolSoilWaterContent)
}))
return(VolSoilWaterContent$d)
}
calculateVolSoilWaterContent(daily_input_test)
calculateVolSoilWaterContent <- function(InputTable) {
#Input should be a df/tibble with the columns
#JulianDay (int) (these values need to be contiguous or else the function doesn't work),
#SoilTopThickness (float)
#WiltingPoint (float)
VolSoilWaterContent = InputTable %>%
#Subtract JulianDay by its first value to get 0.
#Since accumulate() takes .init from .x[[1]], this sets the initial value to 0 (Eq. 2.2.1-15).
mutate(d = accumulate(.x = JulianDay-first(JulianDay), .f=function(WaterStorage_dprev, row) {
data = cur_data_all()
if(JulianDay == 1) {print("asd")}
SoilTopThickness = data$SoilTopThickness[row]
WiltingPoint = data$WiltingPoint[row]
#Eq. 2.2.1-23 to 2.2.1-24
VolSoilWaterContent = WaterStorage_dprev/SoilTopThickness
if (VolSoilWaterContent == 0) {
VolSoilWaterContent = WiltingPoint
}
return(VolSoilWaterContent)
}))
return(VolSoilWaterContent$d)
}
calculateVolSoilWaterContent(daily_input_test)
calculateVolSoilWaterContent <- function(InputTable) {
#Input should be a df/tibble with the columns
#JulianDay (int) (these values need to be contiguous or else the function doesn't work),
#SoilTopThickness (float)
#WiltingPoint (float)
VolSoilWaterContent = InputTable %>%
#Subtract JulianDay by its first value to get 0.
#Since accumulate() takes .init from .x[[1]], this sets the initial value to 0 (Eq. 2.2.1-15).
mutate(d = accumulate(.x = JulianDay-first(JulianDay), .f=function(WaterStorage_dprev, row) {
data = cur_data_all()
if(row == 1) {print("asd")}
SoilTopThickness = data$SoilTopThickness[row]
WiltingPoint = data$WiltingPoint[row]
#Eq. 2.2.1-23 to 2.2.1-24
VolSoilWaterContent = WaterStorage_dprev/SoilTopThickness
if (VolSoilWaterContent == 0) {
VolSoilWaterContent = WiltingPoint
}
return(VolSoilWaterContent)
}))
return(VolSoilWaterContent$d)
}
calculateVolSoilWaterContent(daily_input_test)
calculateVolSoilWaterContent <- function(InputTable) {
#Input should be a df/tibble with the columns
#JulianDay (int) (these values need to be contiguous or else the function doesn't work),
#SoilTopThickness (float)
#WiltingPoint (float)
VolSoilWaterContent = InputTable %>%
#Subtract JulianDay by its first value to get 0.
#Since accumulate() takes .init from .x[[1]], this sets the initial value to 0 (Eq. 2.2.1-15).
mutate(d = accumulate(.x = JulianDay-first(JulianDay), .f=function(WaterStorage_dprev, row) {
data = cur_data_all()
if(row == 1) {print(WaterStorage_dprev)}
SoilTopThickness = data$SoilTopThickness[row]
WiltingPoint = data$WiltingPoint[row]
#Eq. 2.2.1-23 to 2.2.1-24
VolSoilWaterContent = WaterStorage_dprev/SoilTopThickness
if (VolSoilWaterContent == 0) {
VolSoilWaterContent = WiltingPoint
}
return(VolSoilWaterContent)
}))
return(VolSoilWaterContent$d)
}
calculateVolSoilWaterContent(daily_input_test)
calculateVolSoilWaterContent <- function(InputTable) {
#Input should be a df/tibble with the columns
#JulianDay (int) (these values need to be contiguous or else the function doesn't work),
#SoilTopThickness (float)
#WiltingPoint (float)
VolSoilWaterContent = InputTable %>%
#Subtract JulianDay by its first value to get 0.
#Since accumulate() takes .init from .x[[1]], this sets the initial value to 0 (Eq. 2.2.1-15).
mutate(d = accumulate(.x = JulianDay, .f=function(WaterStorage_dprev, row) {
data = cur_data_all()
if(row == 1) {print(WaterStorage_dprev)}
SoilTopThickness = data$SoilTopThickness[row]
WiltingPoint = data$WiltingPoint[row]
#Eq. 2.2.1-23 to 2.2.1-24
VolSoilWaterContent = WaterStorage_dprev/SoilTopThickness
if (VolSoilWaterContent == 0) {
VolSoilWaterContent = WiltingPoint
}
return(VolSoilWaterContent)
}))
return(VolSoilWaterContent$d)
}
calculateVolSoilWaterContent(daily_input_test)
#Eq. 2.2.1-24
if(VolSoilWaterContent <= 0) {
VolSoilWaterContent = WiltingPoint
}
calculateVolSoilWaterContent <- function(InputTable) {
#Input should be a df/tibble with the columns
#JulianDay (int) (these values need to be contiguous or else the function doesn't work),
#SoilTopThickness (float)
#WiltingPoint (float)
VolSoilWaterContent = InputTable %>%
#Subtract JulianDay by its first value to get 0.
#Since accumulate() takes .init from .x[[1]], this sets the initial value to 0 (Eq. 2.2.1-15).
mutate(d = accumulate(.x = JulianDay, .f=function(WaterStorage_dprev, row) {
data = cur_data_all()
print(row)
if(row == 1) {print(WaterStorage_dprev)}
SoilTopThickness = data$SoilTopThickness[row]
WiltingPoint = data$WiltingPoint[row]
#Eq. 2.2.1-23 to 2.2.1-24
VolSoilWaterContent = WaterStorage_dprev/SoilTopThickness
if (VolSoilWaterContent == 0) {
VolSoilWaterContent = WiltingPoint
}
return(VolSoilWaterContent)
}))
return(VolSoilWaterContent$d)
}
calculateVolSoilWaterContent(daily_input_test)
calculateSoilTemp2 <- function(InputTable) {
#Input should be a df/tibble with the columns
#JulianDay (int) (these values need to be contiguous or else the function doesn't work),
#SoilMeanDepth (float)
#SurfaceTemp (float)
#GAI (float)
SoilTemp = InputTable %>%
#Subtract JulianDay by its first value to get 0.
#Since accumulate() takes .init from .x[[1]], this sets the initial value to 0 (Eq. 2.2.1-15).
mutate(d = accumulate2(.x = rep(0,365), .y=row_number()[-1], .init = 0, .f=function(SoilTemp_dprev, nxt, row) {
data = cur_data_all()
SoilMeanDepth = data$SoilMeanDepth[row]
SurfaceTemp = data$SurfaceTemp[row]
GAI = data$GAI[row]
#Eq. 2.2.1-16
SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev) * 0.24 * exp(-SoilMeanDepth*0.0174) * exp(-0.15*GAI)
return(SoilTemp_d)
}))
return(SoilTemp$d)
}
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp2 <- calculateSoilTemp2(daily_input_test)
SoilTemp1
calculateSoilTemp2 <- function(InputTable) {
#Input should be a df/tibble with the columns
#JulianDay (int) (these values need to be contiguous or else the function doesn't work),
#SoilMeanDepth (float)
#SurfaceTemp (float)
#GAI (float)
SoilTemp = InputTable %>%
#Subtract JulianDay by its first value to get 0.
#Since accumulate() takes .init from .x[[1]], this sets the initial value to 0 (Eq. 2.2.1-15).
mutate(d = accumulate2(.x = rep(0,364), .y=row_number()[-1], .init = 0, .f=function(SoilTemp_dprev, nxt, row) {
data = cur_data_all()
SoilMeanDepth = data$SoilMeanDepth[row]
SurfaceTemp = data$SurfaceTemp[row]
GAI = data$GAI[row]
#Eq. 2.2.1-16
SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev) * 0.24 * exp(-SoilMeanDepth*0.0174) * exp(-0.15*GAI)
return(SoilTemp_d)
}))
return(SoilTemp$d)
}
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp2 <- calculateSoilTemp2(daily_input_test)
SoilTemp1
zz <- bind_cols(SoilTemp1,SoilTemp2)
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp2 <- calculateSoilTemp2(daily_input_test)
zz <- bind_cols(SoilTemp1,SoilTemp2)
View(zz)
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp2 <- calculateSoilTemp2(daily_input_test)
zz <- bind_cols(SoilTemp1,SoilTemp2)
SoilTemp1
SoilTemp1
zz <- bind_rows(SoilTemp1,SoilTemp2)
zz <- tibble(SoilTemp1,SoilTemp2)
View(zz)
calculateSoilTemp2 <- function(InputTable) {
#Input should be a df/tibble with the columns
#JulianDay (int) (these values need to be contiguous or else the function doesn't work),
#SoilMeanDepth (float)
#SurfaceTemp (float)
#GAI (float)
SoilTemp = InputTable %>%
#Subtract JulianDay by its first value to get 0.
#Since accumulate() takes .init from .x[[1]], this sets the initial value to 0 (Eq. 2.2.1-15).
mutate(d = accumulate2(.x = rep(2,366), .y=row_number()[-1], .init = 0, .f=function(SoilTemp_dprev, nxt, row) {
data = cur_data_all()
SoilMeanDepth = data$SoilMeanDepth[row]
SurfaceTemp = data$SurfaceTemp[row]
GAI = data$GAI[row]
#Eq. 2.2.1-16
SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev) * 0.24 * exp(-SoilMeanDepth*0.0174) * exp(-0.15*GAI)
return(SoilTemp_d)
}))
return(SoilTemp$d)
}
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp2 <- calculateSoilTemp2(daily_input_test)
zz <- tibble(SoilTemp1,SoilTemp2)
calculateSoilTemp2 <- function(InputTable) {
#Input should be a df/tibble with the columns
#JulianDay (int) (these values need to be contiguous or else the function doesn't work),
#SoilMeanDepth (float)
#SurfaceTemp (float)
#GAI (float)
SoilTemp = InputTable %>%
#Subtract JulianDay by its first value to get 0.
#Since accumulate() takes .init from .x[[1]], this sets the initial value to 0 (Eq. 2.2.1-15).
mutate(d = accumulate2(.x = rep(2,367), .y=row_number()[-1], .init = 0, .f=function(SoilTemp_dprev, nxt, row) {
data = cur_data_all()
SoilMeanDepth = data$SoilMeanDepth[row]
SurfaceTemp = data$SurfaceTemp[row]
GAI = data$GAI[row]
#Eq. 2.2.1-16
SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev) * 0.24 * exp(-SoilMeanDepth*0.0174) * exp(-0.15*GAI)
return(SoilTemp_d)
}))
return(SoilTemp$d)
}
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp2 <- calculateSoilTemp2(daily_input_test)
calculateSoilTemp2 <- function(InputTable) {
#Input should be a df/tibble with the columns
#JulianDay (int) (these values need to be contiguous or else the function doesn't work),
#SoilMeanDepth (float)
#SurfaceTemp (float)
#GAI (float)
SoilTemp = InputTable %>%
#Subtract JulianDay by its first value to get 0.
#Since accumulate() takes .init from .x[[1]], this sets the initial value to 0 (Eq. 2.2.1-15).
mutate(d = accumulate2(.x = rep(2,364), .y=row_number()[-1], .init = 0, .f=function(SoilTemp_dprev, nxt, row) {
data = cur_data_all()
SoilMeanDepth = data$SoilMeanDepth[row]
SurfaceTemp = data$SurfaceTemp[row]
GAI = data$GAI[row]
#Eq. 2.2.1-16
SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev) * 0.24 * exp(-SoilMeanDepth*0.0174) * exp(-0.15*GAI)
return(SoilTemp_d)
}))
return(SoilTemp$d)
}
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp2 <- calculateSoilTemp2(daily_input_test)
zz <- tibble(SoilTemp1,SoilTemp2)
View(zz)
calculateSoilTemp2 <- function(InputTable) {
#Input should be a df/tibble with the columns
#SoilMeanDepth (float)
#SurfaceTemp (float)
#GAI (float)
SoilTemp = InputTable %>%
mutate(d = accumulate2(.x = rep(0,nrow(InputTable)), .y=row_number()[-1], .init = 0, .f=function(SoilTemp_dprev, nxt, row) {
data = cur_data_all()
SoilMeanDepth = data$SoilMeanDepth[row]
SurfaceTemp = data$SurfaceTemp[row]
GAI = data$GAI[row]
#Eq. 2.2.1-16
SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev) * 0.24 * exp(-SoilMeanDepth*0.0174) * exp(-0.15*GAI)
return(SoilTemp_d)
}))
return(SoilTemp$d)
}
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp2 <- calculateSoilTemp2(daily_input_test)
calculateSoilTemp2 <- function(InputTable) {
#Input should be a df/tibble with the columns
#SoilMeanDepth (float)
#SurfaceTemp (float)
#GAI (float)
SoilTemp = InputTable %>%
mutate(d = accumulate2(.x = rep(0,nrow(InputTable)-1), .y=row_number()[-1], .init = 0, .f=function(SoilTemp_dprev, nxt, row) {
data = cur_data_all()
SoilMeanDepth = data$SoilMeanDepth[row]
SurfaceTemp = data$SurfaceTemp[row]
GAI = data$GAI[row]
#Eq. 2.2.1-16
SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev) * 0.24 * exp(-SoilMeanDepth*0.0174) * exp(-0.15*GAI)
return(SoilTemp_d)
}))
return(SoilTemp$d)
}
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp2 <- calculateSoilTemp2(daily_input_test)
zz <- tibble(SoilTemp1,SoilTemp2)
View(zz)
calculateSoilTemp2 <- function(InputTable) {
#Input should be a df/tibble with the columns
#SoilMeanDepth (float)
#SurfaceTemp (float)
#GAI (float)
SoilTemp = InputTable %>%
mutate(d = accumulate(.x = row_number()[-1], .init = 0, .f=function(SoilTemp_dprev, row) {
data = cur_data_all()
SoilMeanDepth = data$SoilMeanDepth[row]
SurfaceTemp = data$SurfaceTemp[row]
GAI = data$GAI[row]
#Eq. 2.2.1-16
SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev) * 0.24 * exp(-SoilMeanDepth*0.0174) * exp(-0.15*GAI)
return(SoilTemp_d)
}))
return(SoilTemp$d)
}
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp2 <- calculateSoilTemp2(daily_input_test)
zz <- tibble(SoilTemp1,SoilTemp2)
View(zz)
calculateSoilTemp2 <- function(InputTable) {
#Input should be a df/tibble with the columns
#SoilMeanDepth (float)
#SurfaceTemp (float)
#GAI (float)
SoilTemp = InputTable %>%
mutate(d = accumulate(.x = row_number(), .init = 0, .f=function(SoilTemp_dprev, row) {
data = cur_data_all()
SoilMeanDepth = data$SoilMeanDepth[row]
SurfaceTemp = data$SurfaceTemp[row]
GAI = data$GAI[row]
#Eq. 2.2.1-16
SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev) * 0.24 * exp(-SoilMeanDepth*0.0174) * exp(-0.15*GAI)
return(SoilTemp_d)
}))
return(SoilTemp$d)
}
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp2 <- calculateSoilTemp2(daily_input_test)
calculateSoilTemp <- function(InputTable) {
#Input should be a df/tibble with the columns
#SoilMeanDepth (float)
#SurfaceTemp (float)
#GAI (float)
result = InputTable %>%
mutate(SoilTemp = accumulate(.x = row_number()[-1], .init = 0, .f=function(SoilTemp_dprev, row) {
data = cur_data_all()
SoilMeanDepth = data$SoilMeanDepth[row]
SurfaceTemp = data$SurfaceTemp[row]
GAI = data$GAI[row]
#Eq. 2.2.1-16
SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev) * 0.24 * exp(-SoilMeanDepth*0.0174) * exp(-0.15*GAI)
return(SoilTemp_d)
}))
return(result$SoilTemp)
}
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp2 <- calculateSoilTemp2(daily_input_test)
calculateSoilTemp <- function(InputTable) {
#Input should be a df/tibble with the columns
#SoilMeanDepth (float)
#SurfaceTemp (float)
#GAI (float)
result = InputTable %>%
mutate(SoilTemp = accumulate(.x = row_number()[-1], .init = 0, .f=function(SoilTemp_dprev, row) {
data = cur_data_all()
SoilMeanDepth = data$SoilMeanDepth[row]
SurfaceTemp = data$SurfaceTemp[row]
GAI = data$GAI[row]
#Eq. 2.2.1-16
SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev) * 0.24 * exp(-SoilMeanDepth*0.0174) * exp(-0.15*GAI)
return(SoilTemp_d)
}))
return(result$SoilTemp)
}
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp2 <- calculateSoilTemp2(daily_input_test)
calculateSoilTemp <- function(InputTable) {
#Input should be a df/tibble with the columns
#SoilMeanDepth (float)
#SurfaceTemp (float)
#GAI (float)
result = InputTable %>%
mutate(SoilTemp = accumulate(.x = row_number()[-1], .init = 0, .f=function(SoilTemp_dprev, row) {
data = cur_data_all()
SoilMeanDepth = data$SoilMeanDepth[row]
SurfaceTemp = data$SurfaceTemp[row]
GAI = data$GAI[row]
#Eq. 2.2.1-16
SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev) * 0.24 * exp(-SoilMeanDepth*0.0174) * exp(-0.15*GAI)
return(SoilTemp_d)
}))
return(result$SoilTemp)
}
SoilTemp1 <- calculateSoilTemp(daily_input_test)
SoilTemp <- calculateSoilTemp(daily_input_test)
SoilTemp
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
source("re_functions.r")
here::i_am("re_notebook.rmd")
slc = 1001009
climate_test_norms1 <- readr::read_csv("climate/climateNorms_by_poly_1980_2010.csv") %>%
filter(SLC == slc)
climate_test_norms1 %>%
kable(caption="Climate normals for SLC polygon 1001009 for the period 1980 - 2010.")
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
source("re_functions.r")
here::i_am("re_notebook.rmd")
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
source("re_functions.r")
here::i_am("re_notebook.rmd")
here::i_am("re_notebook.rmd")
slc = 1001009
climate_test_norms1 <- readr::read_csv("climate/climateNorms_by_poly_1980_2010.csv") %>%
filter(SLC == slc)
climate_test_norms1 %>%
kable(caption="Climate normals for SLC polygon 1001009 for the period 1980 - 2010.")
climate_test_norms1
climate_test_norms1 %>%
kable(caption="Climate normals for SLC polygon 1001009 for the period 1980 - 2010.")
climate_test_norms1 <- readr::read_csv("climate/climateNorms_by_poly_1980_2010.csv") %>%
filter(SLC == slc)
climate_test_norms1 %>%
kable(caption="Climate normals for SLC polygon 1001009 for the period 1980 - 2010.")
R.version()
R.Version()
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
source("re_functions.r")
here::i_am("re_notebook.rmd")
slc = 1001009
climate_test_norms1 <- readr::read_csv("climate/climateNorms_by_poly_1980_2010.csv") %>%
filter(SLC == slc)
climate_test_norms1 %>%
kable(caption="Climate normals for SLC polygon 1001009 for the period 1980 - 2010.")
