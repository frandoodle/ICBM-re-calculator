percentageSoilOrganicCarbon = 2,
variance = 300,
alfa = 0.7,
decompositionMinimumTemperature = -3.78,
decompositionMaximumTemperature = 30.00,
moistureResponseFunctionAtWiltingPoint = 0.180,
moistureResponseFunctionAtSaturation = 0.420,
evapotranspirations = climate_test_norms1$PET,
precipitations = climate_test_norms1$PREC,
temperatures = climate_test_norms1$Tavg
)
zz <- tibble(
emergenceDay = 141,
ripeningDay = 197,
yield = 3000,
clay = 5,
sand = 20,
layerThicknessInMillimeters = 250,
percentageSoilOrganicCarbon = 2,
variance = 300,
alfa = 0.7,
decompositionMinimumTemperature = -3.78,
decompositionMaximumTemperature = 30.00,
moistureResponseFunctionAtWiltingPoint = 0.180,
moistureResponseFunctionAtSaturation = 0.420,
evapotranspirations = climate_test_norms1$PET,
precipitations = climate_test_norms1$PREC,
temperatures = climate_test_norms1$Tavg
)
zz$temperatures
view(zz)
here::i_am()
here::i_am("create_reinput.r")
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
source("re_functions.r")
here::i_am("re_notebook.rmd")
slc = 1001009
climate_test_norms1 <- readr::read_csv("climate/climateNorms_by_poly_1980_2010.csv") %>%
filter(SLC == slc)
climate_test_norms1 %>%
kable(caption="Climate normals for SLC polygon 1001009 for the period 1980 - 2010.")
climate_data_monthly <- climate_test_norms1
daily_input_test <- tibble(
JulianDay = 1:365,
Yield = rep(3000, 365),
perennial = rep(FALSE, 365),
SoilOrganicC_Percent = rep(12, 365),
ClayContent = rep(0.05, 365),
SandContent = rep(0.2, 365)
) %>%
rowwise() %>%
#add climate data to the input thing
mutate(Tavg = filter(climate_data_monthly, month==ceiling(JulianDay/30.4375))$Tavg,
PREC = filter(climate_data_monthly, month==ceiling(JulianDay/30.4375))$PREC,
PET = filter(climate_data_monthly, month==ceiling(JulianDay/30.4375))$PET) %>%
ungroup()
daily_input_test
GAI_return <- calculateGAI(daily_input_test)
GAI_return
GAI <- GAI_return[["GAI"]]
WaterContent_return <- calculateWaterContent(daily_input_test)
WaterContent_return
SoilTopThickness = 250 #Constant (millimetres)
SoilMeanDepth = SoilTopThickness/20
LeafAreaIndex = 0.8*GAI
Temperature = daily_input_test$Tavg
SurfaceTemp <- ifelse(Temperature < 0, 0.20*Temperature, Temperature*(0.95+0.05*exp(-0.4*(LeafAreaIndex-3))))
if(JulianDay == 1) {
SoilTemp_d = 0
} else {
SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev)*0.24*exp(-SoilMeanDepth*0.0174)*exp(-0.15*GAI)
}
daily_input_test
calculateSoilTemp <- function(JulianDay,SoilTemp_dprev, SoilMeanDepth, SurfaceTemp, GAI) {
SoilTemp_d = ifelse(JulianDay == 1, 0,SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev)*0.24*exp(-SoilMeanDepth*0.0174)*exp(-0.15*GAI))
return(SoilTemp_d)
}
SurfaceTemp
daily_input_test
aaa <- daily_input_test %>%
mutate(b = calculateSoilTemp(.$JulianDay, lag(b), 250, SurfaceTemp[1], GAI[1]))
aaa <- daily_input_test %>%
mutate(b = calculateSoilTemp(.$JulianDay, lag(.$JulianDay), 250, SurfaceTemp[1], GAI[1]))
View(aaa)
aaa <- daily_input_test %>%
rowwise() %>%
mutate(b = calculateSoilTemp(.$JulianDay, lag(b), 250, SurfaceTemp[1], GAI[1]))
aaa <- daily_input_test %>%
mutate(b = 0) %>%
rowwise() %>%
mutate(b = calculateSoilTemp(.$JulianDay, lag(b), 250, SurfaceTemp[1], GAI[1]))
aaa <- daily_input_test %>%
mutate(b = 0)
aaa
aaa <- daily_input_test %>%
mutate(b = 0) %>%
rowwise() %>%
mutate(b = calculateSoilTemp(.$JulianDay, lag(b), 250, SurfaceTemp[1], GAI[1]))
SurfaceTemp[1]
GAI[1]
aaa <- daily_input_test %>%
mutate(b = 0) %>%
rowwise() %>%
mutate(b = calculateSoilTemp(.$JulianDay, 2, 250, SurfaceTemp[1], GAI[1]))
aaa <- daily_input_test %>%
mutate(b = 0) %>%
rowwise() %>%
mutate(b = calculateSoilTemp(2, lag(b), 250, SurfaceTemp[1], GAI[1]))
aaa <- daily_input_test %>%
mutate(b = 0) %>%
rowwise() %>%
mutate(b = calculateSoilTemp(JulianDay, lag(b), 250, SurfaceTemp[1], GAI[1]))
aaa
aaa <- daily_input_test %>%
mutate(b = 0) %>%
rowwise() %>%
mutate(bb = calculateSoilTemp(JulianDay, lag(b), 250, SurfaceTemp[1], GAI[1]))
aaa
aaa <- daily_input_test %>%
mutate(bb = calculateSoilTemp(.$JulianDay, lag(b), 250, SurfaceTemp[1], GAI[1]))
aaa <- daily_input_test %>%
mutate(b = calculateSoilTemp(.$JulianDay, lag(b), 250, SurfaceTemp[1], GAI[1]))
tib <- tibble(a = 1:3, b = 2)
tib <- tibble(a = 1:3, b = 1)
tib
tib <- tibble(a = 1:3, b = 1) %>%
mutate(c = ~a+b)
tib <- tibble(a = 1:3, b = 1) %>%
mutate(c = a+b)
tib
tib <- tibble(a = 1:3, b = 1) %>%
mutate(c = a+b+NA)
tib
tib <- tibble(a = 1:3, b = 1) %>%
mutate(c = lag(a))
tib
func <- function(time, i) {
if(i == 1) {
return(0)
} else {
return(i*2)
}
}
func <- function(t, i) {
if(i == 1) {
return(0)
} else {
return(i*2)
}
}
tib <- tibble(time = 1:3, a = 1) %>%
mutate(c = func(time, a))
tib
tib <- tibble(time = 1:3, a = 1) %>%
mutate(c = func(lag(time), a))
if(time == 1) {
return(0)
} else {
return(i*2)
}
func <- function(t, i) {
if(time == 1) {
return(0)
} else {
return(i*2)
}
}
tib <- tibble(time = 1:3, a = 1) %>%
mutate(c = func(lag(time), a))
tib <- tibble(time = 1:3, a = 4:6) %>%
mutate(c = func(time, lag(a)))
if(time == 1) {
return(0)
} else {
return(i*2)
}
func <- function(t, i) {
if(time == 1) {
return(0)
} else {
return(i*2)
}
}
tib <- tibble(time = 1:3, a = 4:6) %>%
mutate(c = func(time, lag(a)))
tib <- tibble(time = 1:3, a = 4:6)
tib
tib <- tibble(time = 1:3, a = 2:4) %>%
mutate(c = func(time, lag(a)))
tib
tib <- tibble(time = 1:3, a = 2:4) %>%
rowwise() %>%
mutate(c = func(time, lag(a)))
func <- function(t, i) {
ifelse(time==1,0,i*2)
}
tib <- tibble(time = 1:3, a = 2:4) %>%
rowwise() %>%
mutate(c = func(time, lag(a)))
tib <- tibble(time = 1:3, a = 2:4) %>%
rowwise() %>%
mutate(c = func(time, a))
ifelse(t==1,0,i*2)
func <- function(t, i) {
ifelse(t==1,0,i*2)
}
tib <- tibble(time = 1:3, a = 2:4) %>%
rowwise() %>%
mutate(c = func(time, lag(a)))
tib
tib <- tibble(time = 1:3, a = 2:4) %>%
mutate(c = func(time, lag(a)))
tib
tib <- tibble(time = 1:3) %>%
mutate(c = func(time, lag(c)))
func <- function(t, i) {
ifelse(t==1,0,i*2)
}
tib <- tibble(time = 1:3) %>%
mutate(c = func(time, lag(c)))
?lag
tibb <- tibble(time = 1:3) %>%
mutate(
c = accumulate(.x=1, .f=function(acc, nxt) {acc*nxt})
)
tibb
tibb <- tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=1, .f=function(acc, nxt) {acc*nxt})
)
tibb
tibb <- tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=time, .f=function(acc, nxt) {acc*nxt})
)
tibb
tibb <- tibble(time = 1) %>%
mutate(
c = accumulate(.x=time, .f=function(acc, nxt) {acc*nxt})
)
tibb
tibb <- tibble(time = 1, b=1:5) %>%
mutate(
c = accumulate(.x=time, .f=function(acc, nxt) {acc*nxt})
)
tibb
tibb <- tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=time, .f=function(acc, nxt) {acc*nxt})
)
tibb
tibb <- tibble(time = rep(1,5)) %>%
mutate(
c = accumulate2(.x=time, .f=function(acc, nxt) {acc*nxt})
)
tibb <- tibble(time = rep(1,5)) %>%
mutate(
c = accumulate(.x=time, .f=function(acc, nxt) {acc*nxt})
)
tibb
tibb <- tibble(time = rep(1,5)) %>%
mutate(
c = accumulate2(.x=time, .y=row_number()[-1], .f=function(acc, nxt) {acc*nxt})
)
tibb <- tibble(time = rep(1,5)) %>%
mutate(
c = accumulate2(.x=time, .y=row_number()[-1], .f=function(acc, nxt, row) {acc*nxt})
)
tibb
time = db$time[row]
tibb <- tibble(time = 1:5) %>%
mutate(
c = accumulate2(.x=time, .y=row_number()[-1], .f=function(acc, nxt, row) {
db = cur_data_all()
time = db$time[row]
})
)
tibb
tibb <- tibble(time = 1:5) %>%
mutate(
c = accumulate2(.x=time, .y=row_number()[-1], .f=function(acc, nxt, row) {
db = cur_data_all()
time = db$time[row]
}) %>% unlist()
)
tibb
acc*2
tibb <- tibble(time = 1:5) %>%
mutate(
c = accumulate2(.x=time, .y=row_number()[-1], .f=function(acc, nxt, row) {
db = cur_data_all()
time = db$time[row]
acc*2
}) %>% unlist()
)
tibb
acc*time
tibb <- tibble(time = 1:5) %>%
mutate(
c = accumulate2(.x=time, .y=row_number()[-1], .f=function(acc, nxt, row) {
db = cur_data_all()
time = db$time[row]
acc*time
}) %>% unlist()
)
tibb
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
source("re_functions.r")
here::i_am("re_notebook.rmd")
slc = 1001009
climate_test_norms1 <- readr::read_csv("climate/climateNorms_by_poly_1980_2010.csv") %>%
filter(SLC == slc)
climate_test_norms1 %>%
kable(caption="Climate normals for SLC polygon 1001009 for the period 1980 - 2010.")
climate_data_monthly <- climate_test_norms1
daily_input_test <- tibble(
JulianDay = 1:365,
Yield = rep(3000, 365),
perennial = rep(FALSE, 365),
SoilOrganicC_Percent = rep(12, 365),
ClayContent = rep(0.05, 365),
SandContent = rep(0.2, 365)
) %>%
rowwise() %>%
#add climate data to the input thing
mutate(Tavg = filter(climate_data_monthly, month==ceiling(JulianDay/30.4375))$Tavg,
PREC = filter(climate_data_monthly, month==ceiling(JulianDay/30.4375))$PREC,
PET = filter(climate_data_monthly, month==ceiling(JulianDay/30.4375))$PET) %>%
ungroup()
GAI_return <- calculateGAI(daily_input_test)
GAI_return
GAI <- GAI_return[["GAI"]]
WaterContent_return <- calculateWaterContent(daily_input_test)
WaterContent_return
SoilTopThickness = 250 #Constant (millimetres)
SoilMeanDepth = SoilTopThickness/20
LeafAreaIndex = 0.8*GAI
Temperature = daily_input_test$Tavg
SurfaceTemp <- ifelse(Temperature < 0, 0.20*Temperature, Temperature*(0.95+0.05*exp(-0.4*(LeafAreaIndex-3))))
# if(JulianDay == 1) {
# 	SoilTemp_d = 0
# } else {
# 	SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev)*0.24*exp(-SoilMeanDepth*0.0174)*exp(-0.15*GAI)
# }
# func <- function(t, i) {
# 	ifelse(t==1,1,i*2)
# }
# tib <- tibble(time = 1:3) %>%
# 	mutate(c = func(time, lag(c)))
# tib
tibb <- tibble(time = 1:5) %>%
mutate(
c = accumulate2(.x=time, .y=row_number()[-1], .f=function(acc, nxt, row) {
db = cur_data_all()
time = db$time[row]
acc*time
}) %>% unlist()
)
tibb
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
source("re_functions.r")
here::i_am("re_notebook.rmd")
slc = 1001009
climate_test_norms1 <- readr::read_csv("climate/climateNorms_by_poly_1980_2010.csv") %>%
filter(SLC == slc)
climate_test_norms1 %>%
kable(caption="Climate normals for SLC polygon 1001009 for the period 1980 - 2010.")
climate_data_monthly <- climate_test_norms1
daily_input_test <- tibble(
JulianDay = 1:365,
Yield = rep(3000, 365),
perennial = rep(FALSE, 365),
SoilOrganicC_Percent = rep(12, 365),
ClayContent = rep(0.05, 365),
SandContent = rep(0.2, 365)
) %>%
rowwise() %>%
#add climate data to the input thing
mutate(Tavg = filter(climate_data_monthly, month==ceiling(JulianDay/30.4375))$Tavg,
PREC = filter(climate_data_monthly, month==ceiling(JulianDay/30.4375))$PREC,
PET = filter(climate_data_monthly, month==ceiling(JulianDay/30.4375))$PET) %>%
ungroup()
GAI_return <- calculateGAI(daily_input_test)
GAI_return
GAI <- GAI_return[["GAI"]]
WaterContent_return <- calculateWaterContent(daily_input_test)
WaterContent_return
SoilTopThickness = 250 #Constant (millimetres)
SoilMeanDepth = SoilTopThickness/20
LeafAreaIndex = 0.8*GAI
Temperature = daily_input_test$Tavg
SurfaceTemp <- ifelse(Temperature < 0, 0.20*Temperature, Temperature*(0.95+0.05*exp(-0.4*(LeafAreaIndex-3))))
# if(JulianDay == 1) {
# 	SoilTemp_d = 0
# } else {
# 	SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev)*0.24*exp(-SoilMeanDepth*0.0174)*exp(-0.15*GAI)
# }
# func <- function(t, i) {
# 	ifelse(t==1,1,i*2)
# }
# tib <- tibble(time = 1:3) %>%
# 	mutate(c = func(time, lag(c)))
# tib
tibb <- tibble(time = 1:5) %>%
mutate(
c = accumulate2(.x=time, .y=row_number()[-1], .f=function(acc, nxt, row) {
db = cur_data_all()
time = db$time[row]
acc*time
}) %>% unlist()
)
tibb
# func <- function(t, i) {
# 	ifelse(t==1,1,i*2)
# }
# tib <- tibble(time = 1:3) %>%
# 	mutate(c = func(time, lag(c)))
# tib
tibb <- tibble(time = 1:5) %>%
mutate(
c = accumulate2(.x=time, .y=row_number()[-1], .f=function(acc, nxt, row) {
db = cur_data_all()
time = db$time[row]
acc*time
}) %>% unlist()
)
tibb
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
source("re_functions.r")
here::i_am("re_notebook.rmd")
slc = 1001009
climate_test_norms1 <- readr::read_csv("climate/climateNorms_by_poly_1980_2010.csv") %>%
filter(SLC == slc)
climate_test_norms1 %>%
kable(caption="Climate normals for SLC polygon 1001009 for the period 1980 - 2010.")
climate_data_monthly <- climate_test_norms1
daily_input_test <- tibble(
JulianDay = 1:365,
Yield = rep(3000, 365),
perennial = rep(FALSE, 365),
SoilOrganicC_Percent = rep(12, 365),
ClayContent = rep(0.05, 365),
SandContent = rep(0.2, 365)
) %>%
rowwise() %>%
#add climate data to the input thing
mutate(Tavg = filter(climate_data_monthly, month==ceiling(JulianDay/30.4375))$Tavg,
PREC = filter(climate_data_monthly, month==ceiling(JulianDay/30.4375))$PREC,
PET = filter(climate_data_monthly, month==ceiling(JulianDay/30.4375))$PET) %>%
ungroup()
GAI_return <- calculateGAI(daily_input_test)
GAI_return
GAI <- GAI_return[["GAI"]]
WaterContent_return <- calculateWaterContent(daily_input_test)
WaterContent_return
SoilTopThickness = 250 #Constant (millimetres)
SoilMeanDepth = SoilTopThickness/20
LeafAreaIndex = 0.8*GAI
Temperature = daily_input_test$Tavg
SurfaceTemp <- ifelse(Temperature < 0, 0.20*Temperature, Temperature*(0.95+0.05*exp(-0.4*(LeafAreaIndex-3))))
# if(JulianDay == 1) {
# 	SoilTemp_d = 0
# } else {
# 	SoilTemp_d = SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev)*0.24*exp(-SoilMeanDepth*0.0174)*exp(-0.15*GAI)
# }
# func <- function(t, i) {
# 	ifelse(t==1,1,i*2)
# }
# tib <- tibble(time = 1:3) %>%
# 	mutate(c = func(time, lag(c)))
# tib
tibb <- tibble(time = 1:5) %>%
mutate(
c = accumulate2(.x=time, .y=row_number()[-1], .f=function(acc, nxt, row) {
db = cur_data_all()
time = db$time[row]
acc*time
}) %>% unlist()
)
tibb
install.packages(knitr)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
