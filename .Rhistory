library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
library(lubridate)
library(tidyr)
dir.create(tempdir()) #This fixes a bug if the temporary directory is not found
here::i_am("re_notebook.rmd")
source(here::here("re_functions.r"))
holos_re_calculation <- readr::read_csv(here::here("holos_re_calculation.csv"))
daily_input_test <- tibble(
Year = 2020,
JulianDay = 1:365,
Region = "QC",
Yield = rep(3000, 365),
perennial = rep(FALSE, 365),
SoilOrganicC_Percent = rep(2, 365),
ClayContent = rep(0.05, 365),
SandContent = rep(0.2, 365),
alfa = rep(0.7, 365)
) %>%
mutate(Tavg = holos_re_calculation$InputTemperature,
PREC = holos_re_calculation$InputPrecipitation,
PET = holos_re_calculation$InputEvapotranspiration)
calculateGAI
GAI_return <- calculateGAI(daily_input_test)
GAI_return
GAI <- GAI_return[["GAI"]]
WaterContent_return <- calculateWaterContent(daily_input_test)
WaterContent_return
WiltingPoint <- WaterContent_return[["WiltingPoint"]]
FieldCapacity <- WaterContent_return[["FieldCapacity"]]
SoilTopThickness <- 250
SoilMeanDepth <- SoilTopThickness/20
LeafAreaIndex <- 0.8*GAI
Temperature <- daily_input_test$Tavg
SurfaceTemp <- ifelse(Temperature < 0, 0.20*Temperature,
Temperature*(0.95+0.05*exp(-0.4*(LeafAreaIndex-3))))
daily_input_test_soiltemp <- daily_input_test %>%
full_join(GAI_return, by="JulianDay") %>%
full_join(WaterContent_return, by="JulianDay") %>%
bind_cols(SoilTopThickness = SoilTopThickness,
SoilMeanDepth = SoilMeanDepth,
LeafAreaIndex = LeafAreaIndex,
SurfaceTemp = SurfaceTemp)
sidenote1 <- tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=time, .f=function(acc, row) {
db = cur_data_all()
time = db$time[row]
acc*time
}) %>% unlist()
)
sidenote1
calculateSoilTemp
SoilTemp <- calculateSoilTemp(daily_input_test_soiltemp)
#Eq. 2.2.1-17
K_c <- 1.3 - (1.3-0.8) * exp(-0.17*GAI)
ET_0 <- daily_input_test$PET
#Eq. 2.2.1-18
ET_c <- ET_0 * K_c
Irrigation_percentage_monthly <- tibble(
`Province/Region` = c("Canada", "BC", "AB", "SK", "MB", "ON", "QC", "Atlantic Provinces"),
`Jan` = 0,
`Feb` = 0,
`Mar` = 0,
`Apr` = c(4.69, 8.00, 3.06, 15.08, 0.22, 3.81, 10.54, 7.30),
`May` = c(4.69, 8.00, 3.06, 15.08, 0.22, 3.81, 10.54, 7.30),
`Jun` = c(15.64, 19.54, 13.92, 14.80, 11.30, 18.35, 19.54, 10.62),
`Jul` = c(38.96, 27.77, 42.65, 29.58, 48.15, 41.46, 32.24, 27.97),
`Aug` = c(26.92, 25.66, 28.04, 19.40, 34.88, 26.74, 25.97, 34.06),
`Sep` = c(4.56, 5.51, 4.63, 3.03, 2.61, 2.91, 2.71, 5.63),
`Oct` = c(4.56, 5.51, 4.63, 3.03, 2.61, 2.91, 2.71, 5.63),
`Nov` = 0,
`Dec` = 0
) %>%
mutate(Total = select(., where(is.numeric)) %>% rowSums())
Irrigation_percentage_monthly %>%
kable(caption = "Percentage of total annual irrigation water applied by month for each province/region in Canada using average values across 2010 and 2012 (Adapted from Table 7 in the Holos algorithm document).")
P <- sum(daily_input_test$PREC)
PE <- sum(daily_input_test$PET)
Region <- "QC"
Days_month <- lubridate::days_in_month(as.Date(paste(daily_input_test$Year, daily_input_test$JulianDay, sep="-"), "%Y-%j"))
Fraction_monthly <- Irrigation_percentage_monthly %>%
filter(`Province/Region` == Region) %>%
`[`(names(Days_month)) %>%
unlist %>%
`/`(100)
if (PE > P) {
warning("Using Eqs. 2.2.1-45 and 2.2.1-46 to calculate default irrigation values")
Irrigation_annual <- PE - P
Irrigation <- ((Irrigation_annual * Fraction_monthly)/Days_month) %>%
unname
} else {
Irrigation <- 0
}
Irrigation <- 0
Precipitation <- daily_input_test$PREC
#Eq. 2.2.1-19 - Eq. 2.2.1-20
CropInterception <- ifelse(Precipitation + Irrigation < 0.2*GAI,
Precipitation + Irrigation,
0.2*GAI)
#Eq. 2.2.1-21
CropInterception <- ifelse(CropInterception > ET_c, ET_c, CropInterception)
#Eq. 2.2.1-22
SoilAvailWater <- Precipitation + Irrigation - CropInterception
daily_input_test_waterstorage <- bind_cols(daily_input_test_soiltemp,
SoilAvailWater = SoilAvailWater,
ET_c = ET_c)
calculateWaterStorage
WaterStorage <- calculateWaterStorage(daily_input_test_waterstorage)
SoilTemp_dprev <- lag(SoilTemp, default=0)
Temp_min <- -3.78
Temp_max <- 30
# Eq. 2.2.1-34 - Eq. 2.2.1-35
re_temp <- ifelse(SoilTemp_dprev < -3.78, 0, ((SoilTemp_dprev - Temp_min)^2)/((Temp_max-Temp_min)^2))
WaterStorage_dprev <- lag(WaterStorage, default = FieldCapacity[1]*SoilTopThickness)
VolSoilWaterContent <- calculateVolSoilWaterContent(WaterStorage_dprev, SoilTopThickness, WiltingPoint)
r_s <- 0.42
r_wp <- 0.18
# Eq. 2.2.1-36
VolSoilWaterContent_sat <- 1.2*FieldCapacity
# Eq. 2.2.1-37
VolSoilWaterContent_opt <- 0.9*FieldCapacity
# Eq. 2.2.1-38 - Eq. 2.2.1-40
re_water <- ifelse(
# if...
VolSoilWaterContent > VolSoilWaterContent_opt,
# then...
(1 - r_s)*((VolSoilWaterContent-VolSoilWaterContent_opt)/(VolSoilWaterContent_opt-VolSoilWaterContent_sat)) + 1, # Eq. 2.2.1-38
ifelse(
# elseif...
VolSoilWaterContent < WiltingPoint,
# then...
r_wp*((VolSoilWaterContent)/(WiltingPoint)), # Eq. 2.2.1-39
# else...
(1-r_wp)*((VolSoilWaterContent-WiltingPoint)/(VolSoilWaterContent_opt-WiltingPoint)) + r_wp)) # Eq. 2.2.1-40
# Eq. 2.2.1-41
re_water <- pmin(pmax(0,re_water),1)
ReferenceAdjustment = 0.10516
# Eq. 2.2.1-42
re_x1 <- re_temp*re_water
# Eq. 2.2.1-43
re_cropdaily <- re_x1/ReferenceAdjustment
# Eq. 2.2.1-44
re_crop <- mean(re_cropdaily)
tibble(`Soil type` = c("Brown", "Dark Brown", "Black"),
`Intensive Tillage` = c(1,1,1),
`Reduced tillage` = c(0.9, 0.85, 0.8),
`No-till` = c(0.8, 0.7, 0.6)) %>%
kable(caption="r_c factor for Alberta, Saskatchewan, and Manitoba only (adapted from Holos algorithm document)")
r_c <- 1
r_edaily <- re_cropdaily*r_c
r_e <- mean(r_edaily)
r_e
daily_input_test_all <- daily_input_test %>%
bind_cols(Days_month = Days_month,
Fraction_monthly = Fraction_monthly,
Irrigation = Irrigation,
GAI = GAI,
SurfaceTemp = SurfaceTemp,
SoilTemp = SoilTemp,
K_c = K_c,
ET_c = ET_c,
Days_month = Days_month,
Fraction_monthly = Fraction_monthly,
Irrigation = Irrigation,
CropInterception = CropInterception,
SoilAvailWater = SoilAvailWater,
WaterStorage = WaterStorage,
SoilTemp_dprev = SoilTemp_dprev,
WaterStorage_dprev = WaterStorage_dprev,
VolSoilWaterContent = VolSoilWaterContent,
re_temp = re_temp,
re_water = re_water,
re_x1 = re_x1,
re_cropdaily = re_cropdaily,
re_crop = re_crop,
r_c = r_c,
r_edaily = r_edaily,
r_e = r_e)
test_re <- daily_input_test_all %>%
summarise(r_e = mean(r_e)) %>%
unlist
holos_re <- holos_re_calculation %>%
mutate(r_e = mean(ClimateParameter)) %>%
summarise(r_e = mean(ClimateParameter)) %>%
unlist
PercentageDifference = 100*(holos_re - test_re)/holos_re
PercentageDifference
source(here::here("re_script.r"))
script_re <- calculate_re(daily_input_test, irrigation_use_estimate = FALSE)
PercentageDifference = 100*(holos_re - script_re)/holos_re
PercentageDifference
calculate_re(daily_input_test,
irrigation_use_estimate = TRUE,
irrigation_region = "Canada")
calculate_re(daily_input_test,
irrigation_use_estimate = FALSE,
irrigation = rep(20,365))
try(calculate_re(daily_input_test))
try(calculate_re(daily_input_test,
irrigation_use_estimate = NA))
try(calculate_re(daily_input_test,
irrigation_region = "Nebraska",
irrigation_use_estimate = TRUE))
calculate_re(daily_input_test,
tillage_type = "Reduced tillage",
tillage_soil = "Brown",
irrigation_use_estimate = FALSE)
calculate_re(daily_input_test,
tillage_type = "No-till",
tillage_soil = "Brown",
irrigation_use_estimate = FALSE)
calculate_re(daily_input_test,
tillage_type = "No-till",
tillage_soil = "Black",
irrigation_use_estimate = FALSE)
calculate_re(daily_input_test,
r_c = rep(0.05,365),
irrigation_use_estimate = FALSE)
try(calculate_re(daily_input_test,
tillage_type = "Quadruple tillage",
tillage_soil = "Brown",
irrigation_use_estimate = FALSE))
try(calculate_re(daily_input_test,
tillage_type = "Reduced tillage",
tillage_soil = "Green",
irrigation_use_estimate = FALSE))
try(calculate_re(daily_input_test,
r_c = c(NA,rep(0.05,364)),
irrigation_use_estimate = FALSE))
multi_year_input <-
bind_rows(mutate(daily_input_test, Year = 2020),
mutate(daily_input_test, Year = 2021),
mutate(daily_input_test, Year = 2022)
)
multi_year_input
multi_year_re <- multi_year_input %>%
group_by(Year) %>%
group_split() %>% # Split the table into a list of tables based on the grouping variable
map(~calculate_re(., irrigation_use_estimate=FALSE)) %>% # Run calculate_re for every member of the list
unlist()
multi_year_re
multi_year_re <- multi_year_input %>%
group_by(Year) %>%
group_split() %>% # Split the table into a list of tables based on the grouping variable
map(~calculate_re(., irrigation_use_estimate=FALSE)) %>% # Run calculate_re for every member of the list
unlist()
multi_year_input %>%
group_by(Year) %>%
group_split() %>% # Split the table into a list of tables based on the grouping variable
map(~calculate_re(., irrigation_use_estimate=FALSE)) %>% # Run calculate_re for every member of the list
unlist()
holos_re <- holos_re_calculation %>%
mutate(r_e = mean(ClimateParameter)) %>%
summarise(r_e = mean(ClimateParameter)) %>%
unlist
holos_re
test_re <- daily_input_test_all %>%
summarise(r_e = mean(r_e)) %>%
unlist
test_re
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
library(lubridate)
library(tidyr)
dir.create(tempdir()) #This fixes a bug if the temporary directory is not found
here::i_am("re_notebook.rmd")
source(here::here("re_functions.r"))
holos_re_calculation <- readr::read_csv(here::here("holos_re_calculation.csv"))
daily_input_test <- tibble(
Year = 2020,
JulianDay = 1:365,
Region = "QC",
Yield = rep(3000, 365),
perennial = rep(FALSE, 365),
SoilOrganicC_Percent = rep(2, 365),
ClayContent = rep(0.05, 365),
SandContent = rep(0.2, 365),
alfa = rep(0.7, 365)
) %>%
mutate(Tavg = holos_re_calculation$InputTemperature,
PREC = holos_re_calculation$InputPrecipitation,
PET = holos_re_calculation$InputEvapotranspiration)
calculateGAI
GAI_return <- calculateGAI(daily_input_test)
GAI_return
GAI <- GAI_return[["GAI"]]
WaterContent_return <- calculateWaterContent(daily_input_test)
WaterContent_return
WiltingPoint <- WaterContent_return[["WiltingPoint"]]
FieldCapacity <- WaterContent_return[["FieldCapacity"]]
SoilTopThickness <- 250
SoilMeanDepth <- SoilTopThickness/20
LeafAreaIndex <- 0.8*GAI
Temperature <- daily_input_test$Tavg
SurfaceTemp <- ifelse(Temperature < 0, 0.20*Temperature,
Temperature*(0.95+0.05*exp(-0.4*(LeafAreaIndex-3))))
daily_input_test_soiltemp <- daily_input_test %>%
full_join(GAI_return, by="JulianDay") %>%
full_join(WaterContent_return, by="JulianDay") %>%
bind_cols(SoilTopThickness = SoilTopThickness,
SoilMeanDepth = SoilMeanDepth,
LeafAreaIndex = LeafAreaIndex,
SurfaceTemp = SurfaceTemp)
sidenote1 <- tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=time, .f=function(acc, row) {
db = cur_data_all()
time = db$time[row]
acc*time
}) %>% unlist()
)
sidenote1
calculateSoilTemp
SoilTemp <- calculateSoilTemp(daily_input_test_soiltemp)
#Eq. 2.2.1-17
K_c <- 1.3 - (1.3-0.8) * exp(-0.17*GAI)
ET_0 <- daily_input_test$PET
#Eq. 2.2.1-18
ET_c <- ET_0 * K_c
Irrigation_percentage_monthly <- tibble(
`Province/Region` = c("Canada", "BC", "AB", "SK", "MB", "ON", "QC", "Atlantic Provinces"),
`Jan` = 0,
`Feb` = 0,
`Mar` = 0,
`Apr` = c(4.69, 8.00, 3.06, 15.08, 0.22, 3.81, 10.54, 7.30),
`May` = c(4.69, 8.00, 3.06, 15.08, 0.22, 3.81, 10.54, 7.30),
`Jun` = c(15.64, 19.54, 13.92, 14.80, 11.30, 18.35, 19.54, 10.62),
`Jul` = c(38.96, 27.77, 42.65, 29.58, 48.15, 41.46, 32.24, 27.97),
`Aug` = c(26.92, 25.66, 28.04, 19.40, 34.88, 26.74, 25.97, 34.06),
`Sep` = c(4.56, 5.51, 4.63, 3.03, 2.61, 2.91, 2.71, 5.63),
`Oct` = c(4.56, 5.51, 4.63, 3.03, 2.61, 2.91, 2.71, 5.63),
`Nov` = 0,
`Dec` = 0
) %>%
mutate(Total = select(., where(is.numeric)) %>% rowSums())
Irrigation_percentage_monthly %>%
kable(caption = "Percentage of total annual irrigation water applied by month for each province/region in Canada using average values across 2010 and 2012 (Adapted from Table 7 in the Holos algorithm document).")
P <- sum(daily_input_test$PREC)
PE <- sum(daily_input_test$PET)
Region <- "QC"
Days_month <- lubridate::days_in_month(as.Date(paste(daily_input_test$Year, daily_input_test$JulianDay, sep="-"), "%Y-%j"))
Fraction_monthly <- Irrigation_percentage_monthly %>%
filter(`Province/Region` == Region) %>%
`[`(names(Days_month)) %>%
unlist %>%
`/`(100)
if (PE > P) {
warning("Using Eqs. 2.2.1-45 and 2.2.1-46 to calculate default irrigation values")
Irrigation_annual <- PE - P
Irrigation <- ((Irrigation_annual * Fraction_monthly)/Days_month) %>%
unname
} else {
Irrigation <- 0
}
Irrigation <- 0
Precipitation <- daily_input_test$PREC
#Eq. 2.2.1-19 - Eq. 2.2.1-20
CropInterception <- ifelse(Precipitation + Irrigation < 0.2*GAI,
Precipitation + Irrigation,
0.2*GAI)
#Eq. 2.2.1-21
CropInterception <- ifelse(CropInterception > ET_c, ET_c, CropInterception)
#Eq. 2.2.1-22
SoilAvailWater <- Precipitation + Irrigation - CropInterception
daily_input_test_waterstorage <- bind_cols(daily_input_test_soiltemp,
SoilAvailWater = SoilAvailWater,
ET_c = ET_c)
calculateWaterStorage
WaterStorage <- calculateWaterStorage(daily_input_test_waterstorage)
SoilTemp_dprev <- lag(SoilTemp, default=0)
Temp_min <- -3.78
Temp_max <- 30
# Eq. 2.2.1-34 - Eq. 2.2.1-35
re_temp <- ifelse(SoilTemp_dprev < -3.78, 0, ((SoilTemp_dprev - Temp_min)^2)/((Temp_max-Temp_min)^2))
WaterStorage_dprev <- lag(WaterStorage, default = FieldCapacity[1]*SoilTopThickness)
VolSoilWaterContent <- calculateVolSoilWaterContent(WaterStorage_dprev, SoilTopThickness, WiltingPoint)
r_s <- 0.42
r_wp <- 0.18
# Eq. 2.2.1-36
VolSoilWaterContent_sat <- 1.2*FieldCapacity
# Eq. 2.2.1-37
VolSoilWaterContent_opt <- 0.9*FieldCapacity
# Eq. 2.2.1-38 - Eq. 2.2.1-40
re_water <- ifelse(
# if...
VolSoilWaterContent > VolSoilWaterContent_opt,
# then...
(1 - r_s)*((VolSoilWaterContent-VolSoilWaterContent_opt)/(VolSoilWaterContent_opt-VolSoilWaterContent_sat)) + 1, # Eq. 2.2.1-38
ifelse(
# elseif...
VolSoilWaterContent < WiltingPoint,
# then...
r_wp*((VolSoilWaterContent)/(WiltingPoint)), # Eq. 2.2.1-39
# else...
(1-r_wp)*((VolSoilWaterContent-WiltingPoint)/(VolSoilWaterContent_opt-WiltingPoint)) + r_wp)) # Eq. 2.2.1-40
# Eq. 2.2.1-41
re_water <- pmin(pmax(0,re_water),1)
ReferenceAdjustment = 0.10516
# Eq. 2.2.1-42
re_x1 <- re_temp*re_water
# Eq. 2.2.1-43
re_cropdaily <- re_x1/ReferenceAdjustment
# Eq. 2.2.1-44
re_crop <- mean(re_cropdaily)
tibble(`Soil type` = c("Brown", "Dark Brown", "Black"),
`Intensive Tillage` = c(1,1,1),
`Reduced tillage` = c(0.9, 0.85, 0.8),
`No-till` = c(0.8, 0.7, 0.6)) %>%
kable(caption="r_c factor for Alberta, Saskatchewan, and Manitoba only (adapted from Holos algorithm document)")
r_c <- 1
r_edaily <- re_cropdaily*r_c
r_e <- mean(r_edaily)
r_e
daily_input_test_all <- daily_input_test %>%
bind_cols(Days_month = Days_month,
Fraction_monthly = Fraction_monthly,
Irrigation = Irrigation,
GAI = GAI,
SurfaceTemp = SurfaceTemp,
SoilTemp = SoilTemp,
K_c = K_c,
ET_c = ET_c,
Days_month = Days_month,
Fraction_monthly = Fraction_monthly,
Irrigation = Irrigation,
CropInterception = CropInterception,
SoilAvailWater = SoilAvailWater,
WaterStorage = WaterStorage,
SoilTemp_dprev = SoilTemp_dprev,
WaterStorage_dprev = WaterStorage_dprev,
VolSoilWaterContent = VolSoilWaterContent,
re_temp = re_temp,
re_water = re_water,
re_x1 = re_x1,
re_cropdaily = re_cropdaily,
re_crop = re_crop,
r_c = r_c,
r_edaily = r_edaily,
r_e = r_e)
test_re <- daily_input_test_all %>%
summarise(r_e = mean(r_e)) %>%
unlist
holos_re <- holos_re_calculation %>%
mutate(r_e = mean(ClimateParameter)) %>%
summarise(r_e = mean(ClimateParameter)) %>%
unlist
PercentageDifference = 100*(holos_re - test_re)/holos_re
PercentageDifference
source(here::here("re_script.r"))
script_re <- calculate_re(daily_input_test, irrigation_use_estimate = FALSE)
PercentageDifference = 100*(holos_re - script_re)/holos_re
PercentageDifference
calculate_re(daily_input_test,
irrigation_use_estimate = TRUE,
irrigation_region = "Canada")
calculate_re(daily_input_test,
irrigation_use_estimate = FALSE,
irrigation = rep(20,365))
try(calculate_re(daily_input_test))
try(calculate_re(daily_input_test,
irrigation_use_estimate = NA))
try(calculate_re(daily_input_test,
irrigation_region = "Nebraska",
irrigation_use_estimate = TRUE))
calculate_re(daily_input_test,
tillage_type = "Reduced tillage",
tillage_soil = "Brown",
irrigation_use_estimate = FALSE)
calculate_re(daily_input_test,
tillage_type = "No-till",
tillage_soil = "Brown",
irrigation_use_estimate = FALSE)
calculate_re(daily_input_test,
tillage_type = "No-till",
tillage_soil = "Black",
irrigation_use_estimate = FALSE)
calculate_re(daily_input_test,
r_c = rep(0.05,365),
irrigation_use_estimate = FALSE)
try(calculate_re(daily_input_test,
tillage_type = "Quadruple tillage",
tillage_soil = "Brown",
irrigation_use_estimate = FALSE))
try(calculate_re(daily_input_test,
tillage_type = "Reduced tillage",
tillage_soil = "Green",
irrigation_use_estimate = FALSE))
try(calculate_re(daily_input_test,
r_c = c(NA,rep(0.05,364)),
irrigation_use_estimate = FALSE))
multi_year_input <-
bind_rows(mutate(daily_input_test, Year = 2020),
mutate(daily_input_test, Year = 2021),
mutate(daily_input_test, Year = 2022)
)
multi_year_input
multi_year_input %>%
group_by(Year) %>%
group_split() %>% # Split the table into a list of tables based on the grouping variable
map(~calculate_re(., irrigation_use_estimate=FALSE)) %>% # Run calculate_re for every member of the list
unlist()
here::i_am("readme.rmd")
