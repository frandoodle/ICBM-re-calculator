+(0.108713*OrgCfactor)
-(0.0157225*OrgCfactor^2)
+(0.00102805*OrgCfactor^3)
+(0.886569*Clayfactor)
-(0.223581*OrgCfactor*Clayfactor)
+(0.0126379*(OrgCfactor^2)*Clayfactor)
-(0.017059*(Clayfactor^2))
+(0.0135266*(OrgCfactor*(Clayfactor^2)))
-(0.0334434*(Clayfactor^3))
-(0.0535182*(Sandfactor))
-(0.0354271*(OrgCfactor*Sandfactor))
-(0.00261313*(OrgCfactor^2)*Sandfactor)
-(0.154563*(Clayfactor)*(Sandfactor))
-(0.0160219*(OrgCfactor)*(Clayfactor)*(Sandfactor))
-(0.0400606*(Clayfactor^2)*(Sandfactor))
-(0.104875*(Sandfactor^2))
+(0.0159857*(OrgCfactor)*(Sandfactor^2))
-(0.0671656*(Clayfactor)*(Sandfactor^2))
-(0.0260699*(Sandfactor^3))
)
# Eq. 2.2.1-8
WiltingPoint <- WiltingPointPercent/100
# Eq. 2.2.1-9
FieldCapacityPercent <- 29.7528+10.3544*(
0.0461615
+0.290955*(OrgCfactor)
-0.0496845*(OrgCfactor^2)
+0.00704802*(OrgCfactor^3)
+0.269101*(Clayfactor)
-0.176528*(OrgCfactor)*(Clayfactor)
+0.0543138*(OrgCfactor^2)*(Clayfactor)
+0.1982*(Clayfactor^2)
-0.060699*(Clayfactor^3)
-0.320249*(Sandfactor)
-0.0111693*(OrgCfactor^2)*(Sandfactor)
+0.14104*(Clayfactor)*(Sandfactor)
+0.0657345*(OrgCfactor)*(Clayfactor)*(Sandfactor)
-0.102026*(Clayfactor^2)*(Sandfactor)
-0.04012*(Sandfactor^2)
+0.160838*(OrgCfactor)*(Sandfactor^2)
-0.121392*(Clayfactor)*(Sandfactor^2)
-0.061667*(Sandfactor^3)
)
# Eq. 2.2.1-10
FieldCapacity <- FieldCapacityPercent/100
return(tibble(JulianDay = InputTable$JulianDay,
OrgCfactor = OrgCfactor,
Clayfactor = Clayfactor,
Sandfactor = Sandfactor,
WiltingPoint = WiltingPoint,
FieldCapacity = FieldCapacity))
}
calculateSurfaceTemp <- function(InputTable){
# Input should be a table with the columns
# JulianDay (int)
# Tavg (float)
# every column required for calculateGAI().
LeafAreaIndex <- 0.8*calculateGAI(InputTable)[["GAI"]]
SurfaceTemp <- ifelse(InputTable$Tavg < 0, 0.20*InputTable$Tavg, InputTable$Tavg*(0.95+0.05*exp(-0.4*(LeafAreaIndex-3))))
return(SurfaceTemp)
}
calculateSoilTemp <- function(InputTable) {
# Input should be a table with the columns
# SoilMeanDepth (float)
# SurfaceTemp (float)
# GAI (float)
result <- InputTable %>%
mutate(SoilTemp = accumulate(.x = row_number()[-1], .init = 0, .f=function(SoilTemp_dprev, row) {
data <- cur_data_all()
SoilMeanDepth <- data$SoilMeanDepth[row]
SurfaceTemp <- data$SurfaceTemp[row]
GAI <- data$GAI[row]
# Eq. 2.2.1-16
SoilTemp_d <- SoilTemp_dprev + (SurfaceTemp-SoilTemp_dprev) * 0.24 * exp(-SoilMeanDepth*0.017) * exp(-0.15*GAI)
return(SoilTemp_d)
}))
return(result$SoilTemp)
}
calculateVolSoilWaterContent <- function(WaterStorage_dprev, SoilTopThickness, WiltingPoint) {
VolSoilWaterContent <- WaterStorage_dprev/SoilTopThickness
VolSoilWaterContent_return <- ifelse(VolSoilWaterContent == 0, WiltingPoint, VolSoilWaterContent)
return(VolSoilWaterContent_return)
}
calculateWaterStorage <- function(InputTable) {
WaterStorage_dprev_initial <- InputTable$FieldCapacity[1]*InputTable$SoilTopThickness[1]
# Input should be a table with the columns
# SoilTopThickness (float)
# WiltingPoint (float)
# FieldCapacity (float)
# SoilAvailWater (float)
# ET_c (float)
# alfa (float)
result = InputTable %>%
mutate(d = accumulate(.x = row_number()[-1], .init = WaterStorage_dprev_initial, .f=function(WaterStorage_dprev, row) {
data <- cur_data_all()
SoilTopThickness <- data$SoilTopThickness[row]
WiltingPoint <- data$WiltingPoint[row]
FieldCapacity <- data$FieldCapacity[row]
SoilAvailWater <- data$SoilAvailWater[row]
ET_c <- data$ET_c[row]
alfa <- data$alfa[row]
# Calculate volumetric soil water content
# Eq. 2.2.1-25 to 2.2.1-26
VolSoilWaterContent <- calculateVolSoilWaterContent(WaterStorage_dprev, SoilTopThickness, WiltingPoint)
# Calculate actual evapotranspiration
# Eq. 2.2.1-27
K_r <- (1 - ((0.95 * FieldCapacity - VolSoilWaterContent)/(0.95 * FieldCapacity - alfa*WiltingPoint)))^2
# Eq. 2.2.1-28
K_r <- pmin(pmax(0,K_r),1)
# Eq. 2.2.1-29
if(VolSoilWaterContent < alfa/100*WiltingPoint) {
K_r <- 0
}
# Eq. 2.2.1-30
ET_a <- ET_c * K_r
# Eq. 2.2.1-31 and #Eq. 2.2.1-32 are addressed in the .init argument of
# the "accumulate" function
# Calculate water storage
# Eq. 2.2.1-33
DeepPerc <- WaterStorage_dprev - FieldCapacity*SoilTopThickness
# Eq. 2.2.1-34
DeepPerc <- ifelse(DeepPerc<0,0,DeepPerc)
# Eq. 2.2.1-35
WaterStorage_d <- WaterStorage_dprev + SoilAvailWater - ET_a - DeepPerc
return(WaterStorage_d)
}))
return(result$d)
}
re <- re_input %>%
group_by(Year) %>%
group_split() %>%
map(~calculate_re(., irrigation_use_estimate=FALSE)) %>%
unlist()
re
re <- re_input %>%
group_by(Year) %>%
group_split() %>%
map(~calculate_re(., irrigation_use_estimate=FALSE)) %>%
unlist()
sidenote1 <- tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=time, .f=function(acc, row) {
db = cur_data_all()
time = db$time[row]
acc*time
}) %>% unlist()
)
sidenote1
sidenote1 <- tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=time, .f=function(acc, row) {
db = cur_data_all()
time = db$time[row]
acc*time
}) %>% unlist()
)
sidenote1
baby <- function(acc,row) {
db = cur_data_all()
time = db$time[row]
acc*time
}
sidenote1 <- tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=time, .f=baby)
%>% unlist()
)
tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=time, .f=baby)
%>% unlist()
)
system.time(tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=time, .f=baby)
%>% unlist()
))
tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
)
bob <- tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
)
bob
system.time(bob)
system.time(tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))
system.time(1+2)
system.time(1111111111+2)
system.time(tibble(time = 1:9999) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))
baby <- function(acc,row) {
db = cur_data_all()
time = db$time[row]
acc+time
}
system.time(tibble(time = 1:9999) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))
system.time(tibble(time = 1:(365*20)) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))
system.time(tibble(time = 1:(365*100)) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))
system.time(tibble(time = 1:(365*50)) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))
system.time(tibble(time = 1:1000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))
mmm <- c(
system.time(tibble(time = 1:1000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
)),
system.time(tibble(time = 1:2000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
)),
system.time(tibble(time = 1:3000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
)),
system.time(tibble(time = 1:4000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
)),
system.time(tibble(time = 1:5000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))
)
mmm
system.time(tibble(time = 1:1000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))$elapsed
zz<- system.time(tibble(time = 1:1000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))
zz
zz["elapsed"]
zz[["elapsed"]]
mmm <- c(
system.time(tibble(time = 1:1000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]],
system.time(tibble(time = 1:2000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]],
system.time(tibble(time = 1:3000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]],
system.time(tibble(time = 1:4000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]],
system.time(tibble(time = 1:5000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]]
)
mmm
plot(mmm)
trytimes <- range(1:100)
?range
trytimes <- range(1,100)
trytimes <- seq(1,100)
?seq
trytimes <- seq(1,10000,by=1000)
trytimes
trytimes <- seq(1,10000,by=1000-1)
trytimes <- seq(1,10000+1,by=1000)
trytimes
trytimes <- seq(10,10000,by=1000)
mmm <- c(
system.time(tibble(time = trytimes) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]]
)
mmm
trytimes <- seq(10,10000,by=1000)
for(time in trytimes) {
mmm <- c(
system.time(tibble(time = time) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]]
nnn <- bind_rows(mmm)
}
)
mmm <- c(
system.time(tibble(time = time) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]]
nnn <- bind_rows(nnn, mmm)
}
)
for(time in trytimes) {
mmm <- c(
system.time(tibble(time = time) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]])
nnn <- bind_rows(nnn, mmm)
}
nnn <- tibble()
for(time in trytimes) {
mmm <- c(
system.time(tibble(time = time) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]])
nnn <- bind_rows(nnn, mmm)
}
nnn
mmm
nnn <- c()
for(time in trytimes) {
mmm <- c(
system.time(tibble(time = time) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]])
nnn <- c(nnn, mmm)
}
nnn
trytimes <- seq(0,100000,by=1000)
nnn <- c()
for(time in trytimes) {
mmm <- c(
system.time(tibble(time = time) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]])
nnn <- c(nnn, mmm)
}
nnn
nnn <- c()
for(time in trytimes) {
print(paste0("Trying time",time))
mmm <- c(
system.time(tibble(time = time) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]])
nnn <- c(nnn, mmm)
}
trytimes <- seq(0,10000,by=1000)
nnn <- c()
for(time in trytimes) {
print(paste0("Trying time",time))
mmm <- c(
system.time(tibble(time = time) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]])
nnn <- c(nnn, mmm)
}
nnn
plot(nnn)
mmm <- c(
system.time(tibble(time = 1000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]])
mmm
mmm <- c(
system.time(tibble(time = 10000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]])
mmm
mmm <- c(
system.time(tibble(time = 100000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]])
mmm
mmm <- c(
system.time(tibble(time = 1000000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]])
mmm
trytimes <- seq(0,10000,by=1000)
nnn <- c()
for(time in trytimes) {
print(paste0("Trying time",time))
mmm <- c(
system.time(tibble(time = 1:time) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]])
nnn <- c(nnn, mmm)
}
plot(nnn)
trytimes <- seq(0,100000,by=1000)
nnn <- c()
for(time in trytimes) {
print(paste0("Trying time",time))
mmm <- c(
system.time(tibble(time = 1:time) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]])
nnn <- c(nnn, mmm)
}
plot(nnn)
log(2)
log(50)
lagacc <- function(acc,row) {
db = cur_data_all()
time = db$time[row]
acc*log(time)
}
system.time(tibble(time = 1:1000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))
trytimes <- seq(0,10000,by=1000)
nnn <- c()
for(time in trytimes) {
print(paste0("Trying time",time))
mmm <- c(
system.time(tibble(time = 1:time) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
))[["elapsed"]])
nnn <- c(nnn, mmm)
}
plot(nnn)
nnn
tibble(nnn,trytimes)
ex_data <- tibble(nnn,trytimes)
ggplot(ex_data, x=trytimes, y=nnn)
ggplot(ex_data, x=trytimes, y=nnn) +
geom_point +
geom_line
ggplot(ex_data, x=trytimes, y=nnn) +
geom_point() +
geom_line()
ggplot(ex_data, aes(x=trytimes, y=nnn)) +
geom_point() +
geom_line()
mmm <- c(
system.time(tibble(time = 1:time) %>%
mutate(
c = accumulate(.x=time, .f=lagacc) %>% unlist()
))[["elapsed"]])
rows <- seq(0,10000,by=1000)
duration <- c()
for(time in rows) {
print(paste0("Trying time",time))
mmm <- c(
system.time(tibble(time = 1:time) %>%
mutate(
c = accumulate(.x=time, .f=lagacc) %>% unlist()
))[["elapsed"]])
duration <- c(duration, mmm)
}
ex_data <- tibble(duration,rows)
ggplot(ex_data, aes(x=rows, y=duration)) +
geom_point() +
geom_line()
tibble(time = 1:1000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
)
tibble(time = 1:1000) %>%
mutate(
c = accumulate(.x=time, .f=baby) %>% unlist()
)
tibble(time = 1:1000) %>%
mutate(
c = accumulate(.x=time, .f=lagacc) %>% unlist()
)
seconds <- c()
for(time in rows) {
print(paste0("Trying time",time))
mmm <- c(
system.time(tibble(time = 1:time) %>%
mutate(
c = accumulate(.x=time, .f=lagacc) %>% unlist()
))[["elapsed"]])
seconds <- c(seconds, mmm)
}
ex_data <- tibble(seconds,rows)
ggplot(ex_data, aes(x=rows, y=duration)) +
geom_point() +
geom_line()
ggplot(ex_data, aes(x=rows, y=seconds)) +
geom_point() +
geom_line()
