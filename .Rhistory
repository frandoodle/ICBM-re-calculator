# see documentation for available options.
#    - soboljansen is used for illustration here
si_obj2 <- sensitivity::soboljansen(model = NULL, X1 = X1, X2 = X2, nboot = 100)
X <- si_obj2$X
n <- nrow(X)
X <- cbind("SampleID" = 1:nrow(X), X)
params_list_sorted_names <- c("SampleID",varSI)
params_list <- X %>%
rowwise %>%
group_split %>%
map(function(x) {
y <- x %>%
pivot_longer(everything()) %>%
deframe()
z <- split(unname(y),names(y))
return(z)
}) %>%
map(~ .[params_list_sorted_names])
# End of sample generation for GSA
# Run the model and calculate log-likelihood
#    - likelihoods were calculated assuming that the error (modeled - mesasured)
#      are iid
Lkhood <- NULL
Lkhood_list <- list()
for(site_n in 1:length(site_data)) {
ncores=parallel::detectCores()-2
cl=parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
Lkhood=foreach(i=1:nrow(X),
.combine = rbind,
.packages = c("parallel",
"doParallel",
"tidyverse"),
.export = c("run_ipcct2",
"IPCCTier2SOMmodel",
"loglik")) %dopar%
run_ipcct2_calculate_loglik(site_data[[site_n]], climate_data, i)
stopCluster(cl)
Lkhood_list[[site_n]] <- Lkhood
}
# # code for non-paralleled run
# Lkhood_list <- list()
# for(i in 1:length(params_list)){
# 	Lkhood_list[[i]] <- run_ipcct2_calculate_loglik(params_list[[i]])
# }
Lkhood1 <- Lkhood_list %>%
bind_rows %>%
mutate(loglik = ifelse(loglik == -Inf, NA, loglik)) %>%
group_by(id) %>%
summarise(loglik = mean(loglik, na.rm=T))
si_obj2_llkhd <- sensitivity::tell(x = si_obj2, y = Lkhood1$loglik)
#==============================
# Calculate First-order and Total global sensitivity indices
#==============================
singleSI <-si_obj2_llkhd$S # individual sensitivity indices
singleSI$parmas <- row.names(singleSI)
names(singleSI) <- c("singsi", "bias", "std.error", "singsi.lci", "singsi.uci", "params")
singleSI <- singleSI[order(-singleSI$singsi), ]
rownames(singleSI) <- 1:nrow(singleSI)
singleSI <- singleSI[, c("params", "singsi", "singsi.lci", "singsi.uci")]
SingPlot <- ggplot(singleSI, aes(x = reorder(params, -singsi), y = singsi, ymax=singsi.uci, ymin=singsi.lci)) +
xlab("Parameters") +
ylab("First Order Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70 ) +
coord_flip() +
theme_bw()
SingPlot
si_obj2_llkhd$S
#==============================
# Total-Order sensitivity indices
#==============================
totalSI <- si_obj2_llkhd$T # total sensitivity indices
totalSI$parmas <- row.names(totalSI)
names(totalSI) <- c("totsi", "bias", "std.error", "totsi.lci", "totsi.uci", "params")
totalSI <- totalSI[order(-totalSI$totsi), ]
rownames(totalSI) <- 1:nrow(totalSI)
totalSI <- totalSI[, c("params", "totsi", "totsi.lci", "totsi.uci")]
TotSIPlot <- ggplot(totalSI, aes(x = reorder(params, -totsi), y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
combined_si <- totalSI %>%
full_join(singleSI, by=c("params"))
return(combined_si)
}
#================================
# Global sensitivity analysis using Sobols method in R using sensitivity package
#================================
library(sensitivity)
library(boot)
library(doParallel)
library(parallel)
library(foreach)
library(here)
library(ggplot2)
source(here::here("r/ipcct2_run.r"))
source(here::here("r/bayesian_loglike.r"))
gsa <- function(site_data,
climate_data,
parameter_bounds,
sample_size = 10) {
# site_data can either be a data.frame, or a list of data.frames
if(!inherits(site_data, "list")) {
site_data <- list(site_data)
}
# read prior distribution from a csv file
# (Required columns: Parameter, value, lower, upper)
paramBounds <- parameter_bounds
# names of parameters that are allowed to vary
varSI       <- paramBounds$Parameter
nParams     <- length(varSI)
# sample size (10 used for illustration purposes)
# (1024 used in Gurung et al., 2020)
N <- sample_size
# Sobols method required 2 matrix
m1 = matrix(runif(nParams*N), nrow=N);
m2 = matrix(runif(nParams*N), nrow=N);
M1 <- matrix(0, nrow = N, ncol = nParams)
M2 <- matrix(0, nrow = N, ncol = nParams)
# transform standard uniform to prior distribution
for(i in 1:nParams){
pos <- which(paramBounds$Parameter == varSI[i])
lower <- paramBounds[pos, "lower"]
upper <- paramBounds[pos, "upper"]
M1[, i] <- qunif(m1[, i], min = lower, max = upper)
M2[, i] <- qunif(m2[, i], min = lower, max = upper)
}
X1 = data.frame(M1)
X2 = data.frame(M2)
names(X1) <- varSI
names(X2) <- varSI
# choose a sensitivity method of your choice from the sensitivity package in R.
# see documentation for available options.
#    - soboljansen is used for illustration here
si_obj2 <- sensitivity::soboljansen(model = NULL, X1 = X1, X2 = X2, nboot = 100)
X <- si_obj2$X
n <- nrow(X)
X <- cbind("SampleID" = 1:nrow(X), X)
params_list_sorted_names <- c("SampleID",varSI)
params_list <- X %>%
rowwise %>%
group_split %>%
map(function(x) {
y <- x %>%
pivot_longer(everything()) %>%
deframe()
z <- split(unname(y),names(y))
return(z)
}) %>%
map(~ .[params_list_sorted_names])
# End of sample generation for GSA
# Run the model and calculate log-likelihood
#    - likelihoods were calculated assuming that the error (modeled - mesasured)
#      are iid
Lkhood <- NULL
Lkhood_list <- list()
for(site_n in 1:length(site_data)) {
ncores=parallel::detectCores()-2
cl=parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
Lkhood=foreach(i=1:nrow(X),
.combine = rbind,
.packages = c("parallel",
"doParallel",
"tidyverse"),
.export = c("run_ipcct2",
"IPCCTier2SOMmodel",
"loglik",
"run_ipcct2_calculate_loglik")) %dopar%
run_ipcct2_calculate_loglik(site_data[[site_n]], climate_data, i)
stopCluster(cl)
Lkhood_list[[site_n]] <- Lkhood
}
# # code for non-paralleled run
# Lkhood_list <- list()
# for(i in 1:length(params_list)){
# 	Lkhood_list[[i]] <- run_ipcct2_calculate_loglik(params_list[[i]])
# }
Lkhood1 <- Lkhood_list %>%
bind_rows %>%
mutate(loglik = ifelse(loglik == -Inf, NA, loglik)) %>%
group_by(id) %>%
summarise(loglik = mean(loglik, na.rm=T))
si_obj2_llkhd <- sensitivity::tell(x = si_obj2, y = Lkhood1$loglik)
#==============================
# Calculate First-order and Total global sensitivity indices
#==============================
singleSI <-si_obj2_llkhd$S # individual sensitivity indices
singleSI$parmas <- row.names(singleSI)
names(singleSI) <- c("singsi", "bias", "std.error", "singsi.lci", "singsi.uci", "params")
singleSI <- singleSI[order(-singleSI$singsi), ]
rownames(singleSI) <- 1:nrow(singleSI)
singleSI <- singleSI[, c("params", "singsi", "singsi.lci", "singsi.uci")]
SingPlot <- ggplot(singleSI, aes(x = reorder(params, -singsi), y = singsi, ymax=singsi.uci, ymin=singsi.lci)) +
xlab("Parameters") +
ylab("First Order Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70 ) +
coord_flip() +
theme_bw()
SingPlot
si_obj2_llkhd$S
#==============================
# Total-Order sensitivity indices
#==============================
totalSI <- si_obj2_llkhd$T # total sensitivity indices
totalSI$parmas <- row.names(totalSI)
names(totalSI) <- c("totsi", "bias", "std.error", "totsi.lci", "totsi.uci", "params")
totalSI <- totalSI[order(-totalSI$totsi), ]
rownames(totalSI) <- 1:nrow(totalSI)
totalSI <- totalSI[, c("params", "totsi", "totsi.lci", "totsi.uci")]
TotSIPlot <- ggplot(totalSI, aes(x = reorder(params, -totsi), y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
combined_si <- totalSI %>%
full_join(singleSI, by=c("params"))
return(combined_si)
}
sa_ex_onesite <- gsa(site_data = sitedata_ex_onesite,
climate_data = climate_data,
parameter_bounds = param_bounds,
sample_size = 10)
sa_ex_onesite
si_obj2
si_obj2 <- sensitivity::fast99(model = NULL, X1 = X1, X2 = X2, nboot = 100)
?fast99
varSI
si_obj2 <- sensitivity::fast99(model = NULL, factors = varSI, X1 = X1, X2 = X2, nboot = 100)
si_obj2 <- sensitivity::fast99(model = NULL, factors = varSI, n = N, X1 = X1, X2 = X2, nboot = 100)
?soboljansen
si_obj2 <- sensitivity::fast99(model = NULL, factors = varSI, n = N)
si_obj2 <- sensitivity::fast99(model = NULL, factors = varSI, n = N)
si_obj2 <- sensitivity::fast99(model = NULL, factors = varSI, n = N, q="qunif")
paramBounds
paramBounds$Parameter
fast99_qargs <- paramBounds
paramBounds
paramBounds %>%
select(lower, upper)
paramBounds %>%
select(min = lower, max = upper)
paramBounds %>%
select(min = lower, max = upper) %>%
group_split
?group_by
paramBounds %>%
group_by(parameter)
paramBounds %>%
group_by(Parameter)
paramBounds %>%
group_by(Parameter) %>%
select(min = lower, max = upper) %>%
group_by()
paramBounds %>%
group_by(Parameter) %>%
select(min = lower, max = upper) %>%
group_split
bb <- paramBounds %>%
group_by(Parameter) %>%
select(min = lower, max = upper) %>%
group_split
bb[[1]]
a <- bb[[1]]
a
a %>%
selct(-Parameter)
a %>%
select(-Parameter)
a %>%
select(-Parameter) %>%
unlist()
a %>%
select(-Parameter) %>%
list()
a %>%
select(-Parameter) %>%
to.list()
a %>%
select(-Parameter) %>%
spread()
a %>%
select(-Parameter) %>%
spread(min, max)
a %>%
spread(Parameter, max)
a %>%
spread(Parameter)
?spread
a %>%
as.list()
a %>%
select(-Parameter) %>%
as.list()
bb <- paramBounds %>%
group_by(Parameter) %>%
select(min = lower, max = upper) %>%
group_split %>%
map(~ . %>%
select(-Parameter) %>%
as.list())
bb
bb <- paramBounds %>%
group_by(Parameter) %>%
select(min = lower, max = upper) %>%
group_split %>%
map(~ function(x) {y <- x %>%
select(-Parameter) %>%
as.list())
bb <- paramBounds %>%
group_by(Parameter) %>%
select(min = lower, max = upper) %>%
group_split %>%
map(~ function(x) {y <- x %>%
select(-Parameter) %>%
as.list()
}
a <- bb[[1]]
bb <- paramBounds %>%
group_by(Parameter) %>%
select(min = lower, max = upper) %>%
group_split %>%
map(function(x) {y <- x %>%
select(-Parameter) %>%
as.list()
})
bb
View(bb)
si_obj2 <- sensitivity::fast99(model = NULL,
factors = paramBounds$Parameter,
n = N,
q="qunif",
q.arg = bb)
View(si_obj2)
fast99_qargs <- paramBounds %>%
group_by(Parameter) %>%
select(min = lower, max = upper) %>%
group_split %>%
map(function(x) {y <- x %>%
select(-Parameter) %>%
as.list()
})
si_obj2 <- sensitivity::fast99(model = NULL,
factors = paramBounds$Parameter,
n = N,
q="qunif",
q.arg = fast99_qargs)
X <- si_obj2$X
n <- nrow(X)
X <- cbind("SampleID" = 1:nrow(X), X)
params_list_sorted_names <- c("SampleID",varSI)
params_list <- X %>%
rowwise %>%
group_split %>%
map(function(x) {
y <- x %>%
pivot_longer(everything()) %>%
deframe()
z <- split(unname(y),names(y))
return(z)
}) %>%
map(~ .[params_list_sorted_names])
Lkhood <- NULL
Lkhood_list <- list()
for(site_n in 1:length(site_data)) {
ncores=parallel::detectCores()-2
cl=parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
Lkhood=foreach(i=1:nrow(X),
.combine = rbind,
.packages = c("parallel",
"doParallel",
"tidyverse"),
.export = c("run_ipcct2",
"IPCCTier2SOMmodel",
"loglik",
"run_ipcct2_calculate_loglik")) %dopar%
run_ipcct2_calculate_loglik(site_data[[site_n]], climate_data, i)
stopCluster(cl)
Lkhood_list[[site_n]] <- Lkhood
}
si_obj2 <- sensitivity::soboljansen(model = NULL, X1 = X1, X2 = X2, nboot = 100)
# read prior distribution from a csv file
# (Required columns: Parameter, value, lower, upper)
paramBounds <- parameter_bounds
# names of parameters that are allowed to vary
varSI       <- paramBounds$Parameter
nParams     <- length(varSI)
# sample size (10 used for illustration purposes)
# (1024 used in Gurung et al., 2020)
N <- sample_size
sample_size <- 10
# read prior distribution from a csv file
# (Required columns: Parameter, value, lower, upper)
paramBounds <- parameter_bounds
# names of parameters that are allowed to vary
varSI       <- paramBounds$Parameter
nParams     <- length(varSI)
# sample size (10 used for illustration purposes)
# (1024 used in Gurung et al., 2020)
N <- sample_size
# Sobols method required 2 matrix
m1 = matrix(runif(nParams*N), nrow=N);
m2 = matrix(runif(nParams*N), nrow=N);
M1 <- matrix(0, nrow = N, ncol = nParams)
M2 <- matrix(0, nrow = N, ncol = nParams)
# transform standard uniform to prior distribution
for(i in 1:nParams){
pos <- which(paramBounds$Parameter == varSI[i])
lower <- paramBounds[pos, "lower"]
upper <- paramBounds[pos, "upper"]
M1[, i] <- qunif(m1[, i], min = lower, max = upper)
M2[, i] <- qunif(m2[, i], min = lower, max = upper)
}
X1 = data.frame(M1)
X2 = data.frame(M2)
names(X1) <- varSI
names(X2) <- varSI
# choose a sensitivity method of your choice from the sensitivity package in R.
# see documentation for available options.
fast99_qargs <- paramBounds %>%
group_by(Parameter) %>%
select(min = lower, max = upper) %>%
group_split %>%
map(function(x) {y <- x %>%
select(-Parameter) %>%
as.list()
})
si_obj2 <- sensitivity::soboljansen(model = NULL, X1 = X1, X2 = X2, nboot = 100)
View(si_obj2)
si_obj2 <- sensitivity::fast99(model = NULL,
factors = paramBounds$Parameter,
n = N,
q="qunif",
q.arg = fast99_qargs)
View(si_obj2)
paramBounds$Parameter
factors=c("tillfac_FT", "tillfac_RT", "wfacirri",
"k10", "k20", "k30", "k40", "k50",
"f1", "f2", "f3", "f5", "f6", "f7", "f8",
"tmax", "topt", "plig")
si_obj2 <- sensitivity::fast99(model = NULL,
factors = factors,
n = N,
q="qunif",
q.arg = fast99_qargs)
View(si_obj2)
ls_tillfac_FT=list(min=3.026, max=3.026)
ls_tillfac_RT=list(min=2.075, max=2.075)
ls_wfacirri=list(min=paramBounds[3,4], max=paramBounds[3,5])
ls_k10=list(min=paramBounds[4,4], max=paramBounds[4,5])
ls_k20=list(min=paramBounds[5,4], max=paramBounds[5,5])
ls_k30=list(min=paramBounds[6,4], max=paramBounds[6,5])
ls_k40=list(min=paramBounds[7,4], max=paramBounds[7,5])
ls_k50=list(min=paramBounds[8,4], max=paramBounds[8,5])
ls_f1=list(min=paramBounds[9,4], max=paramBounds[9,5])
ls_f2=list(min=paramBounds[10,4], max=paramBounds[10,5])
ls_f3=list(min=paramBounds[11,4], max=paramBounds[11,5])
ls_f5=list(min=paramBounds[12,4], max=paramBounds[12,5])
ls_f6=list(min=paramBounds[13,4], max=paramBounds[13,5])
ls_f7=list(min=paramBounds[14,4], max=paramBounds[14,5])
ls_f8=list(min=paramBounds[15,4], max=paramBounds[15,5])
ls_tmax=list(min=paramBounds[16,4], max=paramBounds[16,5])
ls_topt=list(min=paramBounds[17,4], max=paramBounds[17,5])
ls_plig=list(min=paramBounds[18,4], max=paramBounds[18,5])
fast99bbb <- list(ls_tillfac_FT,ls_tillfac_RT,ls_wfacirri,
ls_k10,ls_k20,ls_k30, ls_k40, ls_k50,
ls_f1, ls_f2, ls_f3, ls_f5,ls_f6, ls_f7, ls_f8,
ls_tmax, ls_topt, ls_plig)
View(fast99bbb)
View(fast99_qargs)
paramBounds
fast99_qargs <- paramBounds %>%
group_by(Parameter) %>%
select(min = lower, max = upper) %>%
group_split
fast99_qargs
fast99_qargs <- paramBounds %>%
group_by(Parameter) %>%
select(min = lower, max = upper)
View(fast99bbb)
si_obj2 <- sensitivity::fast99(model = NULL,
factors = paramBounds$Parameter,
n = N,
q="qunif",
q.arg = fast99bbb)
View(si_obj2)
si_obj2 <- sensitivity::fast99(model = NULL,
factors = paramBounds$Parameter,
n = N, M = 4,
q="qunif",
q.arg = fast99bbb)
View(si_obj2)
si_obj2 <- sensitivity::fast99(model = NULL,
factors = paramBounds$Parameter,
n = 200, M = 4,
q="qunif",
q.arg = fast99bbb)
View(si_obj2)
n
N
si_obj2 <- sensitivity::fast99(model = NULL,
factors = paramBounds$Parameter,
n = 100, M = 4,
q="qunif",
q.arg = fast99bbb)
View(si_obj2)
