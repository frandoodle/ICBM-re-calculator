)),
0)) %>%
# Perform corrections
mutate(first_soc_treatment = first(soc_tha_lowest_depth),
soc_dsm_difference = initial_dsm - first_soc_treatment,
lowest_depth_difference = 30 - lowest_depth,
soc_30cm_dynamic = ifelse(lowest_depth_difference != 0,
soc_tha_lowest_depth + soc_dsm_difference + fifteen_to_thirty_average_additional,
soc_tha_lowest_depth + fifteen_to_thirty_average_additional)) %>%
mutate(soc_30cm_naive = soc_tha_lowest_depth * (30/lowest_depth))
fifteenthirty <- site_data_3_joined %>%
select(-combination_group) %>%
filter(soil_depth == "15-30") %>%
unique() %>%
rename(id = Exp_ID,
loc = location_name,
year = year_name,
trmt = treatment_name)
site_data_5_corrected %>%
filter(location_name == "Swift Current New") %>%
mutate(soc_30cm_dynamic = soc_30cm_dynamic + fifteen_to_thirty_average_additional)
site_data_5_corrected %>%
select(Exp_ID, location_name, treatment_name, year_name,
initial_dsm,
soc_30cm_naive, soc_30cm_dynamic
) %>%
filter(location_name == "Lethbridge") %>%
filter(!is.na(soc_30cm_naive)) %>%
filter(treatment_name == "Fw-Wt I")
site_data_5_corrected %>%
select(Exp_ID, location_name, treatment_name, year_name,
initial_dsm, soc_tha_lowest_depth,
soc_30cm_naive, soc_30cm_dynamic
) %>%
filter(location_name == "Ellerslie") %>%
filter(!is.na(soc_30cm_naive)) %>%
filter(treatment_name == "F25NS")
site_data_5_corrected %>%
pivot_longer(c("soc_30cm_naive", "soc_30cm_dynamic"), names_to="soc_method", values_to="soc") %>%
pivot_longer(c("initial_dsm", "initial_cmods"), names_to="initial_method", values_to="initial") %>%
ggplot(aes(x=year_name)) +
geom_point(aes(y=soc, color=soc_method), alpha=0.2) +
geom_point(aes(y=initial, shape=initial_method, x=initial_soc_year_dsm), color="green") +
theme_bw() +
facet_wrap(vars(location_name)) +
labs(x = "Year", y = "SOC (Mg/ha)",
color = "Depth \ncorrection \nmethod", shape = "Initial C \nestimation \nmethod") +
theme(aspect.ratio = 1) +
scale_color_manual(labels = c("Dynamic", "Naive"), values = c("blue", "red")) +
scale_shape_manual(labels = c("CMods", "DSM"), values = c("square", "triangle"))
make_normal_plot <- function(location) {
site_data_5_corrected %>%
filter(location_name == location) %>%
pivot_longer(c("soc_30cm_naive", "soc_30cm_dynamic", "soc_tha_lowest_depth"), names_to="soc_method", values_to="soc") %>%
pivot_longer(c("initial_dsm", "initial_cmods"), names_to="initial_method", values_to="initial") %>%
ggplot(aes(x=year_name, y=soc_30cm_naive)) +
geom_point(aes(y=soc, color=soc_method), alpha=0.2) +
geom_point(aes(y=initial, shape=initial_method, x=initial_soc_year_dsm), color="green") +
theme_bw() +
facet_wrap(vars(treatment_name)) +
labs(title = location, x = "Year", y = "SOC (Mg/ha)",
color = "Depth \ncorrection \nmethod", shape = "Initial C \nestimation \nmethod") +
theme(aspect.ratio = 1) +
scale_color_manual(labels = c("Dynamic", "Naive", "Uncorrected"), values = c("blue", "red", "#666666")) +
scale_shape_manual(labels = c("CMods", "DSM"), values = c("square", "triangle"))
}
make_normal_plot("Ellerslie")
make_normal_plot("Harrow")
make_normal_plot("Indian Head")
make_normal_plot("Lethbridge")
make_normal_plot("Ottawa")
make_normal_plot("Scott")
make_normal_plot("Swift Current New")
make_normal_plot("Swift Current Old")
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
library(lubridate)
library(tidyr)
dir.create(tempdir()) #This fixes a bug if the temporary directory is not found
here::i_am("walkthrough_re.rmd")
source(here::here("r/icbm_calculate_re.r"))
quickstart_input <- tibble(
Year = 2000,
JulianDay = 1:365,
Tavg = rep(0,365),
PREC = rep(0,365),
PET = rep(0,365)
)
calculate_re(quickstart_input,
yield=3000,
perennial=F,
SoilOrganicC_Percent = 5,
ClayContent = 0.05,
SandContent = 0.2,
SoilTopThickness = 250,
Temp_min = -3.78,
Temp_max = 30,
r_s = 0.42,
r_wp = 0.18,
ReferenceAdjustment = 0.10516,
r_c = NA,
tillage_soil = "Brown",
tillage_type = "Intensive Tillage",
irrigation_region = "Canada",
irrigation_use_estimate = TRUE,
irrigation = 0)
calculate_re
holos_re_calculation <- readr::read_csv(here::here("data/holos_re_calculation.csv"))
# climate data
daily_input_test <- tibble(
Year = 1983,
JulianDay = 1:365,
Tavg = holos_re_calculation$InputTemperature,
PREC = holos_re_calculation$InputPrecipitation,
PET = holos_re_calculation$InputEvapotranspiration)
# other values
yield = 2181.304348
perennial = FALSE
SoilOrganicC_Percent = 2
ClayContent = 0.39
SandContent = 0.17
alfa = 0.7
SoilTopThickness = 250
Temp_min = -3.78
Temp_max = 30
r_s = 0.42
r_wp = 0.18
ReferenceAdjustment = 0.10516
r_c = NA
tillage_soil = "Brown"
tillage_type = "Intensive Tillage"
irrigation_region = "Canada"
irrigation_use_estimate = FALSE
irrigation = 0
ggplot(holos_re_calculation, aes(x=JulianDay, y=InputTemperature)) +
geom_col(fill="salmon") +
ylab("Temperature (Â°C)") +
xlab("Day") +
theme_bw()
ggplot(holos_re_calculation, aes(x=JulianDay, y=InputPrecipitation)) +
geom_col(fill="aquamarine2") +
ylab("Precipitation (mm/day)") +
xlab("Day") +
theme_bw()
calculateGAI
GAI_return <- calculateGAI(daily_input_test$JulianDay,
yield,
perennial)
GAI_return
GAI <- GAI_return[["GAI"]]
calculateWaterContent
WaterContent_return <- calculateWaterContent(SoilOrganicC_Percent = SoilOrganicC_Percent,
ClayContent = ClayContent,
SandContent = SandContent)
WaterContent_return
WiltingPoint <- WaterContent_return[["WiltingPoint"]]
FieldCapacity <- WaterContent_return[["FieldCapacity"]]
SoilTopThickness <- 250
SoilMeanDepth <- SoilTopThickness/20
LeafAreaIndex <- 0.8*GAI
Temperature <- daily_input_test$Tavg
SurfaceTemp <- ifelse(Temperature < 0, 0.20*Temperature,
Temperature*(0.95+0.05*exp(-0.4*(LeafAreaIndex-3))))
sidenote1 <- tibble(time = 1:5) %>%
mutate(
c = accumulate(.x=time, .f=function(acc, row) {
db = cur_data_all()
time = db$time[row]
acc*time
}) %>% unlist()
)
sidenote1
calculateSoilTemp
SoilTemp <- calculateSoilTemp(SurfaceTemp = SurfaceTemp,
GAI = GAI,
SoilMeanDepth = SoilMeanDepth)
Irrigation_percentage_monthly <- tibble(
`Province/Region` = c("Canada", "BC", "AB", "SK", "MB", "ON", "QC", "Atlantic Provinces"),
`Jan` = 0,
`Feb` = 0,
`Mar` = 0,
`Apr` = c(4.69, 8.00, 3.06, 15.08, 0.22, 3.81, 10.54, 7.30),
`May` = c(4.69, 8.00, 3.06, 15.08, 0.22, 3.81, 10.54, 7.30),
`Jun` = c(15.64, 19.54, 13.92, 14.80, 11.30, 18.35, 19.54, 10.62),
`Jul` = c(38.96, 27.77, 42.65, 29.58, 48.15, 41.46, 32.24, 27.97),
`Aug` = c(26.92, 25.66, 28.04, 19.40, 34.88, 26.74, 25.97, 34.06),
`Sep` = c(4.56, 5.51, 4.63, 3.03, 2.61, 2.91, 2.71, 5.63),
`Oct` = c(4.56, 5.51, 4.63, 3.03, 2.61, 2.91, 2.71, 5.63),
`Nov` = 0,
`Dec` = 0
) %>%
mutate(Total = select(., where(is.numeric)) %>% rowSums())
Irrigation_percentage_monthly %>%
kable(caption = "Percentage of total annual irrigation water applied by month for each province/region in Canada using average values across 2010 and 2012 (Adapted from the Holos algorithm document, Table 47).")
P <- sum(daily_input_test$PREC)
PE <- sum(daily_input_test$PET)
Region <- "QC"
Days_month <- lubridate::days_in_month(as.Date(paste(daily_input_test$Year, daily_input_test$JulianDay, sep="-"), "%Y-%j"))
Fraction_monthly <- Irrigation_percentage_monthly %>%
filter(`Province/Region` == Region) %>%
`[`(names(Days_month)) %>%
unlist %>%
`/`(100)
if (PE > P) {
warning("Using Eqs. 2.2.1-17 and 2.2.1-18 to calculate default irrigation values")
Irrigation_annual <- PE - P
Irrigation <- ((Irrigation_annual * Fraction_monthly)/Days_month) %>%
unname
} else {
Irrigation <- 0
}
Irrigation <- 0
#Eq. 2.2.1-19
K_c <- 1.3 - (1.3-0.8) * exp(-0.17*GAI)
ET_0 <- daily_input_test$PET
#Eq. 2.2.1-20
ET_c <- ET_0 * K_c
Precipitation <- daily_input_test$PREC
#Eq. 2.2.1-21 - Eq. 2.2.1-22
CropInterception <- ifelse(Precipitation + Irrigation < 0.2*GAI,
Precipitation + Irrigation,
0.2*GAI)
#Eq. 2.2.1-23
CropInterception <- ifelse(CropInterception > ET_c, ET_c, CropInterception)
#Eq. 2.2.1-24
SoilAvailWater <- Precipitation + Irrigation - CropInterception
calculateWaterStorage
WaterStorage <- calculateWaterStorage(SoilAvailWater = SoilAvailWater,
ET_c = ET_c,
alfa = 0.7,
SoilTopThickness = SoilTopThickness,
WiltingPoint = WiltingPoint,
FieldCapacity = FieldCapacity)
SoilTemp_dprev <- lag(SoilTemp, default=0)
Temp_min <- -3.78
Temp_max <- 30
# Eq. 2.2.1-36 - Eq. 2.2.1-37
re_temp <- ifelse(SoilTemp_dprev < -3.78, 0, ((SoilTemp_dprev - Temp_min)^2)/((Temp_max-Temp_min)^2))
WaterStorage_dprev <- lag(WaterStorage, default = FieldCapacity[1]*SoilTopThickness)
VolSoilWaterContent <- calculateVolSoilWaterContent(WaterStorage_dprev, SoilTopThickness, WiltingPoint)
r_s <- 0.42
r_wp <- 0.18
# Eq. 2.2.1-38
VolSoilWaterContent_sat <- 1.2*FieldCapacity
# Eq. 2.2.1-39
VolSoilWaterContent_opt <- 0.9*FieldCapacity
# Eq. 2.2.1-40 - Eq. 2.2.1-42
re_water <- ifelse(
# if...
VolSoilWaterContent > VolSoilWaterContent_opt,
# then...
(1 - r_s)*((VolSoilWaterContent-VolSoilWaterContent_opt)/(VolSoilWaterContent_opt-VolSoilWaterContent_sat)) + 1, # Eq. 2.2.1-40
ifelse(
# elseif...
VolSoilWaterContent < WiltingPoint,
# then...
r_wp*((VolSoilWaterContent)/(WiltingPoint)), # Eq. 2.2.1-41
# else...
(1-r_wp)*((VolSoilWaterContent-WiltingPoint)/(VolSoilWaterContent_opt-WiltingPoint)) + r_wp)) # Eq. 2.2.1-42
# Eq. 2.2.1-43
re_water <- pmin(pmax(0,re_water),1)
ReferenceAdjustment = 0.10516
# Eq. 2.2.1-44
re_x1 <- re_temp*re_water
# Eq. 2.2.1-45
re_cropdaily <- re_x1/ReferenceAdjustment
# Eq. 2.2.1-46
re_crop <- mean(re_cropdaily)
tibble(`Soil type` = c("Brown", "Dark Brown", "Black"),
`Intensive Tillage` = c(1,1,1),
`Reduced tillage` = c(0.9, 0.85, 0.8),
`No-till` = c(0.8, 0.7, 0.6)) %>%
kable(caption="r_c factor for Alberta, Saskatchewan, and Manitoba only (adapted from Holos algorithm document)")
r_c <- 1
r_edaily <- re_cropdaily*r_c
r_e <- mean(r_edaily)
r_e
daily_input_test_all <- daily_input_test %>%
bind_cols(Days_month = Days_month,
Fraction_monthly = Fraction_monthly,
Irrigation = Irrigation,
GAI = GAI,
SurfaceTemp = SurfaceTemp,
SoilTemp = SoilTemp,
K_c = K_c,
ET_c = ET_c,
Days_month = Days_month,
Fraction_monthly = Fraction_monthly,
Irrigation = Irrigation,
CropInterception = CropInterception,
SoilAvailWater = SoilAvailWater,
WaterStorage = WaterStorage,
SoilTemp_dprev = SoilTemp_dprev,
WaterStorage_dprev = WaterStorage_dprev,
VolSoilWaterContent = VolSoilWaterContent,
re_temp = re_temp,
re_water = re_water,
re_x1 = re_x1,
re_cropdaily = re_cropdaily,
re_crop = re_crop,
r_c = r_c,
r_edaily = r_edaily,
r_e = r_e)
daily_input_test_all
test_re <- daily_input_test_all %>%
summarise(r_e = mean(r_e)) %>%
unlist
test_re
holos_re <- holos_re_calculation %>%
summarise(r_e = mean(ClimateParameter)) %>%
unlist
holos_re
PercentageDifference = 100*(holos_re - test_re)/holos_re
PercentageDifference
script_re <- calculate_re(daily_input_test,
yield=2181.304348,
perennial=F,
SoilOrganicC_Percent=2,
ClayContent=0.39,
SandContent=0.17,
irrigation_use_estimate = FALSE)
script_re
PercentageDifference = 100*(holos_re - script_re)/holos_re
PercentageDifference
calculate_re(daily_input_test,
yield = 3000,
perennial = FALSE,
SoilOrganicC_Percent = 2,
ClayContent = 0.05,
SandContent = 0.2,
irrigation_use_estimate = TRUE,
irrigation_region = "Canada")
calculate_re(daily_input_test,
yield = 3000,
perennial = FALSE,
SoilOrganicC_Percent = 2,
ClayContent = 0.05,
SandContent = 0.2,
irrigation_use_estimate = FALSE,
irrigation = rep(20,365))
try(calculate_re(daily_input_test,
yield = 3000,
perennial = FALSE,
SoilOrganicC_Percent = 2,
ClayContent = 0.05,
SandContent = 0.2,
irrigation_use_estimate = NA))
try(calculate_re(daily_input_test,
yield = 3000,
perennial = FALSE,
SoilOrganicC_Percent = 2,
ClayContent = 0.05,
SandContent = 0.2,
irrigation_region = "Nebraska",
irrigation_use_estimate = TRUE))
calculate_re(daily_input_test,
yield = 3000,
perennial = FALSE,
SoilOrganicC_Percent = 2,
ClayContent = 0.05,
SandContent = 0.2,
tillage_type = "Reduced Tillage",
tillage_soil = "Brown")
calculate_re(daily_input_test,
yield = 3000,
perennial = FALSE,
SoilOrganicC_Percent = 2,
ClayContent = 0.05,
SandContent = 0.2,
tillage_type = "No-till",
tillage_soil = "Brown")
calculate_re(daily_input_test,
yield = 3000,
perennial = FALSE,
SoilOrganicC_Percent = 2,
ClayContent = 0.05,
SandContent = 0.2,
tillage_type = "No-till",
tillage_soil = "Black")
calculate_re(daily_input_test,
yield = 3000,
perennial = FALSE,
SoilOrganicC_Percent = 2,
ClayContent = 0.05,
SandContent = 0.2,
r_c = rep(0.05,365))
try(calculate_re(daily_input_test,
yield = 3000,
perennial = FALSE,
SoilOrganicC_Percent = 2,
ClayContent = 0.05,
SandContent = 0.2,
tillage_type = "Quadruple tillage",
tillage_soil = "Brown"))
try(calculate_re(daily_input_test,
yield = 3000,
perennial = FALSE,
SoilOrganicC_Percent = 2,
ClayContent = 0.05,
SandContent = 0.2,
tillage_type = "Reduced tillage",
tillage_soil = "Green"))
try(calculate_re(daily_input_test,
yield = 3000,
perennial = FALSE,
SoilOrganicC_Percent = 2,
ClayContent = 0.05,
SandContent = 0.2,
r_c = c(NA,rep(0.05,364))))
multi_year_input <-
bind_rows(mutate(daily_input_test, Year = 2020),
mutate(daily_input_test, Year = 2021),
mutate(daily_input_test, Year = 2022)
)
multi_year_input
multi_year_input %>%
group_by(Year) %>%
group_split() %>% # Split the table into a list of tables based on the grouping variable
map(~calculate_re(.,
yield = 3000,
perennial = FALSE,
SoilOrganicC_Percent = 2,
ClayContent = 0.05,
SandContent = 0.2)) %>% # Run calculate_re for every member of the list
unlist()
here::i_am("walkthrough_re.rmd")
here::i_am("r/walkthrough_re.rmd")
?rmarkdown::render
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
library(lubridate)
library(tidyr)
dir.create(tempdir()) #This fixes a bug if the temporary directory is not found
here::i_am("walkthrough_re.rmd")
source(here::here("icbm_calculate_re.r"))
here::i_am("walkthrough_re.rmd")
here()
source(here::here("icbm_calculate_re.r"))
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
library(lubridate)
library(tidyr)
dir.create(tempdir()) #This fixes a bug if the temporary directory is not found
here::i_am("walkthrough_re.rmd")
source(here::here("icbm_calculate_re.r"))
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
library(lubridate)
library(tidyr)
dir.create(tempdir()) #This fixes a bug if the temporary directory is not found
here::i_am("walkthrough_re.rmd")
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
library(lubridate)
library(tidyr)
dir.create(tempdir()) #This fixes a bug if the temporary directory is not found
here::i_am("walkthrough_re.rmd")
here::i_am("walkthrough_re.rmd")
here::i_am("generate_walkthrough.rmd")
source(here::here("icbm_calculate_re.r"))
here::i_am("../generate_walkthrough.rmd")
here::i_am("generate_walkthrough.rmd")
here::i_am("re.rproj")
source(here::here("icbm_calculate_re.r"))
here::i_am("re.rproj")
here::i_am()
here::i_am("re.rproj")
library(ggplot2)
library(knitr)
library(dplyr)
library(geojson)
library(tibble)
library(purrr)
library(stringr)
library(here)
library(lubridate)
library(tidyr)
dir.create(tempdir()) #This fixes a bug if the temporary directory is not found
here::i_am("re.rproj")
source(here::here("r/icbm_calculate_re.r"))
here("bib.bib")
here("doc","bib.bib")
