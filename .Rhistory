varSI
sorted_names <- c("SampleID",varSI)
sorted_names
params_list <- X %>%
rowwise %>%
group_split %>%
map(function(x) {
y <- x %>%
pivot_longer(everything()) %>%
deframe()
z <- split(unname(y),names(y))
return(z)
}) %>%
map(~ .[sorted_names])
View(params_list)
params_list_sorted_names <- c("SampleID",varSI)
params_list <- X %>%
rowwise %>%
group_split %>%
map(function(x) {
y <- x %>%
pivot_longer(everything()) %>%
deframe()
z <- split(unname(y),names(y))
return(z)
}) %>%
map(~ .[params_list_sorted_names])
# code for non-paralleled run
Lkhood <- list()
for(i in 1:length(params_list)){
Lkhood[[i]] <- run_ipcct2_calculate_loglik(params_list[[i]])
}
Lkhood2 <- Lkhood %>%
bind_rows %>%
mutate(loglik = ifelse(loglik == -Inf, NA, loglik)) %>%
group_by(id) %>%
summarise(loglik = mean(loglik, na.rm=T))
View(Lkhood2)
View(Lkhood1)
gsa(sitedata_ex_onesite,
climate_data)
gsa <- function(site_data,
climate_data) {
# read prior distribution from a csv file
paramBounds <- read.csv("GSA/cal_parameters_V1.csv", stringsAsFactors = FALSE)
# names of parameters that are allowed to vary
varSI       <- paramBounds$Parameter
nParams     <- length(varSI)
# Random sampling for GSA
set.seed(10)
# sample size (10 used for illustration purposes)
# (1024 used in Gurung et al., 2020)
N <- 10
paramBounds[1,4]=3.036
paramBounds[1,5]=3.036
paramBounds[2,4]=2.075
paramBounds[2,5]=2.075
# Sobols method required 2 matrix
m1 = matrix(runif(nParams*N), nrow=N);
m2 = matrix(runif(nParams*N), nrow=N);
M1 <- matrix(0, nrow = N, ncol = nParams)
M2 <- matrix(0, nrow = N, ncol = nParams)
# transform standard uniform to prior distribution
for(i in 1:nParams){
pos <- which(paramBounds$Parameter == varSI[i])
lower <- paramBounds[pos, "lower"]
upper <- paramBounds[pos, "upper"]
M1[, i] <- qunif(m1[, i], min = lower, max = upper)
M2[, i] <- qunif(m2[, i], min = lower, max = upper)
}
X1 = data.frame(M1)
X2 = data.frame(M2)
names(X1) <- varSI
names(X2) <- varSI
# choose a sensitivity method of your choice from the sensitivity package in R.
# see documentation for available options.
#    - soboljansen is used for illustration here
si_obj2 <- sensitivity::soboljansen(model = NULL, X1 = X1, X2 = X2, nboot = 100)
X <- si_obj2$X
n <- nrow(X)
X <- cbind("SampleID" = 1:nrow(X), X)
params_list_sorted_names <- c("SampleID",varSI)
params_list <- X %>%
rowwise %>%
group_split %>%
map(function(x) {
y <- x %>%
pivot_longer(everything()) %>%
deframe()
z <- split(unname(y),names(y))
return(z)
}) %>%
map(~ .[params_list_sorted_names])
# End of sample generation for GSA
# Run the model and calculate log-likelihood
#    - likelihoods were calculated assuming that the error (modeled - mesasured)
#      are iid
run_ipcct2_calculate_loglik <- function(row)
{
id <- row[[1]] #gets id, hopefully (I think foreach::foreach coerces rows into unnamed vectors)
modelled <- do.call("run_ipcct2",
append(list(site_data, climate_data,
init_active = 0,
init_slow = 0,
init_passive = 0),
row))
actuals <-  site_data %>%
mutate(POLYID = as.character(POLYID)) %>%
select(site = POLYID, year = year_name,  actual = soc_tha_30cm)
model_actual <- modelled %>%
full_join(actuals, by=c("site", "year")) %>%
filter(!is.na(actual))
loglike <- loglik(model_actual$soc_total, model_actual$actual)
output <- tibble(id, loglik = loglike)
return(output)
}
Lkhood <- NULL
ncores=parallel::detectCores()-2
cl=parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
Lkhood=foreach(i=1:nrow(X),
.combine = rbind,
.packages = c("parallel",
"doParallel",
"tidyverse"),
.export = c("run_ipcct2",
"IPCCTier2SOMmodel")) %dopar%
run_ipcct2_calculate_loglik(i)
stopCluster(cl)
# code for non-paralleled run
Lkhood <- list()
for(i in 1:length(params_list)){
Lkhood[[i]] <- run_ipcct2_calculate_loglik(params_list[[i]])
}
Lkhood1 <- Lkhood %>%
bind_rows %>%
mutate(loglik = ifelse(loglik == -Inf, NA, loglik)) %>%
group_by(id) %>%
summarise(loglik = mean(loglik, na.rm=T))
si_obj2_llkhd <- sensitivity::tell(x = si_obj2, y = Lkhood1$loglik)
#==============================
# Calculate First-order and Total global sensitivity indices
#==============================
singleSI <-si_obj2_llkhd$S # individual sensitivity indices
singleSI$parmas <- row.names(singleSI)
names(singleSI) <- c("singsi", "bias", "std.error", "singsi.lci", "singsi.uci", "params")
singleSI <- singleSI[order(-singleSI$singsi), ]
rownames(singleSI) <- 1:nrow(singleSI)
singleSI$ID <- 1:nrow(singleSI)
singleSI <- singleSI[, c("ID", "params", "singsi", "singsi.lci", "singsi.uci")]
SingPlot <- ggplot(singleSI, aes(x = reorder(params, -ID), y = singsi, ymax=singsi.uci, ymin=singsi.lci)) +
xlab("Parameters") +
ylab("First Order Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70 ) +
coord_flip() +
theme_bw()
SingPlot
si_obj2_llkhd$S
#==============================
# Total-Order sensitivity indices
#==============================
totalSI <- si_obj2_llkhd$T # total sensitivity indices
totalSI$parmas <- row.names(totalSI)
names(totalSI) <- c("totsi", "bias", "std.error", "totsi.lci", "totsi.uci", "params")
totalSI <- totalSI[order(-totalSI$totsi), ]
rownames(totalSI) <- 1:nrow(totalSI)
totalSI$ID <- 1:nrow(totalSI)
totalSI <- totalSI[, c("ID", "params", "totsi", "totsi.lci", "totsi.uci")]
TotSIPlot <- ggplot(totalSI, aes(x = reorder(params, -ID), y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
}
gsa(sitedata_ex_onesite,
climate_data)
gsa <- function(site_data,
climate_data) {
# read prior distribution from a csv file
paramBounds <- read.csv("GSA/cal_parameters_V1.csv", stringsAsFactors = FALSE)
# names of parameters that are allowed to vary
varSI       <- paramBounds$Parameter
nParams     <- length(varSI)
# Random sampling for GSA
set.seed(10)
# sample size (10 used for illustration purposes)
# (1024 used in Gurung et al., 2020)
N <- 10
paramBounds[1,4]=3.036
paramBounds[1,5]=3.036
paramBounds[2,4]=2.075
paramBounds[2,5]=2.075
# Sobols method required 2 matrix
m1 = matrix(runif(nParams*N), nrow=N);
m2 = matrix(runif(nParams*N), nrow=N);
M1 <- matrix(0, nrow = N, ncol = nParams)
M2 <- matrix(0, nrow = N, ncol = nParams)
# transform standard uniform to prior distribution
for(i in 1:nParams){
pos <- which(paramBounds$Parameter == varSI[i])
lower <- paramBounds[pos, "lower"]
upper <- paramBounds[pos, "upper"]
M1[, i] <- qunif(m1[, i], min = lower, max = upper)
M2[, i] <- qunif(m2[, i], min = lower, max = upper)
}
X1 = data.frame(M1)
X2 = data.frame(M2)
names(X1) <- varSI
names(X2) <- varSI
# choose a sensitivity method of your choice from the sensitivity package in R.
# see documentation for available options.
#    - soboljansen is used for illustration here
si_obj2 <- sensitivity::soboljansen(model = NULL, X1 = X1, X2 = X2, nboot = 100)
X <- si_obj2$X
n <- nrow(X)
X <- cbind("SampleID" = 1:nrow(X), X)
params_list_sorted_names <- c("SampleID",varSI)
params_list <- X %>%
rowwise %>%
group_split %>%
map(function(x) {
y <- x %>%
pivot_longer(everything()) %>%
deframe()
z <- split(unname(y),names(y))
return(z)
}) %>%
map(~ .[params_list_sorted_names])
# End of sample generation for GSA
# Run the model and calculate log-likelihood
#    - likelihoods were calculated assuming that the error (modeled - mesasured)
#      are iid
run_ipcct2_calculate_loglik <- function(row)
{
id <- row[[1]] #gets id, hopefully (I think foreach::foreach coerces rows into unnamed vectors)
modelled <- do.call("run_ipcct2",
append(list(site_data, climate_data,
init_active = 0,
init_slow = 0,
init_passive = 0),
row))
actuals <-  site_data %>%
mutate(POLYID = as.character(POLYID)) %>%
select(site = POLYID, year = year_name,  actual = soc_tha_30cm)
model_actual <- modelled %>%
full_join(actuals, by=c("site", "year")) %>%
filter(!is.na(actual))
loglike <- loglik(model_actual$soc_total, model_actual$actual)
output <- tibble(id, loglik = loglike)
return(output)
}
Lkhood <- NULL
ncores=parallel::detectCores()-2
cl=parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
Lkhood=foreach(i=1:nrow(X),
.combine = rbind,
.packages = c("parallel",
"doParallel",
"tidyverse"),
.export = c("run_ipcct2",
"IPCCTier2SOMmodel",
"loglik")) %dopar%
run_ipcct2_calculate_loglik(i)
stopCluster(cl)
# # code for non-paralleled run
# Lkhood <- list()
# for(i in 1:length(params_list)){
# 	Lkhood[[i]] <- run_ipcct2_calculate_loglik(params_list[[i]])
# }
Lkhood1 <- Lkhood %>%
bind_rows %>%
mutate(loglik = ifelse(loglik == -Inf, NA, loglik)) %>%
group_by(id) %>%
summarise(loglik = mean(loglik, na.rm=T))
si_obj2_llkhd <- sensitivity::tell(x = si_obj2, y = Lkhood1$loglik)
#==============================
# Calculate First-order and Total global sensitivity indices
#==============================
singleSI <-si_obj2_llkhd$S # individual sensitivity indices
singleSI$parmas <- row.names(singleSI)
names(singleSI) <- c("singsi", "bias", "std.error", "singsi.lci", "singsi.uci", "params")
singleSI <- singleSI[order(-singleSI$singsi), ]
rownames(singleSI) <- 1:nrow(singleSI)
singleSI$ID <- 1:nrow(singleSI)
singleSI <- singleSI[, c("ID", "params", "singsi", "singsi.lci", "singsi.uci")]
SingPlot <- ggplot(singleSI, aes(x = reorder(params, -ID), y = singsi, ymax=singsi.uci, ymin=singsi.lci)) +
xlab("Parameters") +
ylab("First Order Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70 ) +
coord_flip() +
theme_bw()
SingPlot
si_obj2_llkhd$S
#==============================
# Total-Order sensitivity indices
#==============================
totalSI <- si_obj2_llkhd$T # total sensitivity indices
totalSI$parmas <- row.names(totalSI)
names(totalSI) <- c("totsi", "bias", "std.error", "totsi.lci", "totsi.uci", "params")
totalSI <- totalSI[order(-totalSI$totsi), ]
rownames(totalSI) <- 1:nrow(totalSI)
totalSI$ID <- 1:nrow(totalSI)
totalSI <- totalSI[, c("ID", "params", "totsi", "totsi.lci", "totsi.uci")]
TotSIPlot <- ggplot(totalSI, aes(x = reorder(params, -ID), y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
return(list(singleSI, totalSI))
}
gsa(sitedata_ex_onesite,
climate_data)
singleSI
combined_si <- totalSI %>%
full_join(singleSI, by="id")
totalSI <- totalSI[, c("id", "params", "total_si", "total_si_lci", "total_si_uci")]
combined_si <- totalSI %>%
full_join(singleSI, by="ID")
combined_si
totalSI <- totalSI[, c("params", "totsi", "totsi.lci", "totsi.uci")]
TotSIPlot <- ggplot(totalSI, aes(x = reorder(params), y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
reorder(params)
reorder(params, -ID)
TotSIPlot <- ggplot(totalSI, aes(x = reorder(params, -ID), y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
TotSIPlot <- ggplot(totalSI, aes(x = reorder(params, -ID), y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
totalSI <- totalSI[, c("ID", "params", "totsi", "totsi.lci", "totsi.uci")]
TotSIPlot <- ggplot(totalSI, aes(x = reorder(params, -ID), y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
#==============================
# Total-Order sensitivity indices
#==============================
totalSI <- si_obj2_llkhd$T # total sensitivity indices
totalSI$parmas <- row.names(totalSI)
names(totalSI) <- c("totsi", "bias", "std.error", "totsi.lci", "totsi.uci", "params")
totalSI <- totalSI[order(-totalSI$totsi), ]
rownames(totalSI) <- 1:nrow(totalSI)
totalSI$ID <- 1:nrow(totalSI)
totalSI <- totalSI[, c("ID", "params", "totsi", "totsi.lci", "totsi.uci")]
TotSIPlot <- ggplot(totalSI, aes(x = reorder(params, -ID), y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
TotSIPlot <- ggplot(totalSI, aes(x = reorder(params), y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
reorder(params, -ID)
reorder(totalSI, params, -ID)
reorder(totalSI, c(`params`, -`ID`))
TotSIPlot <- ggplot(totalSI, y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
TotSIPlot <- ggplot(totalSI, aes( y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
TotSIPlot <- ggplot(totalSI, aes(x = params, y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
TotSIPlot <- ggplot(totalSI, aes(x = ID, y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
totalSI <- si_obj2_llkhd$T # total sensitivity indices
totalSI$parmas <- row.names(totalSI)
names(totalSI) <- c("totsi", "bias", "std.error", "totsi.lci", "totsi.uci", "params")
totalSI <- totalSI[order(-totalSI$totsi), ]
rownames(totalSI) <- 1:nrow(totalSI)
totalSI$ID <- 1:nrow(totalSI)
totalSI <- totalSI[, c("ID", "params", "totsi", "totsi.lci", "totsi.uci")]
TotSIPlot <- ggplot(totalSI, aes(x = reorder(params, -ID), y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
combined_si <- totalSI %>%
full_join(singleSI, by=c("ID")
)
combined_si
TotSIPlot <- ggplot(totalSI, aes(x = reorder(params, -totsi), y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
rownames(totalSI) <- 1:nrow(totalSI)
totalSI <- totalSI[, c("params", "totsi", "totsi.lci", "totsi.uci")]
#==============================
# Total-Order sensitivity indices
#==============================
totalSI <- si_obj2_llkhd$T # total sensitivity indices
totalSI$parmas <- row.names(totalSI)
names(totalSI) <- c("totsi", "bias", "std.error", "totsi.lci", "totsi.uci", "params")
totalSI <- totalSI[order(-totalSI$totsi), ]
rownames(totalSI) <- 1:nrow(totalSI)
totalSI <- totalSI[, c("params", "totsi", "totsi.lci", "totsi.uci")]
TotSIPlot <- ggplot(totalSI, aes(x = reorder(params, -totsi), y = totsi, ymax=totsi.uci, ymin=totsi.lci)) +
xlab("Parameters") + ylab("Total Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70) +
coord_flip() + theme_bw()
TotSIPlot
singleSI <-si_obj2_llkhd$S # individual sensitivity indices
singleSI$parmas <- row.names(singleSI)
names(singleSI) <- c("singsi", "bias", "std.error", "singsi.lci", "singsi.uci", "params")
singleSI <- singleSI[order(-singleSI$singsi), ]
rownames(singleSI) <- 1:nrow(singleSI)
singleSI <- singleSI[, c("params", "singsi", "singsi.lci", "singsi.uci")]
SingPlot <- ggplot(singleSI, aes(x = reorder(params, -singsi), y = singsi, ymax=singsi.uci, ymin=singsi.lci)) +
xlab("Parameters") +
ylab("First Order Sensitivity Index") +
geom_errorbar(width=0.2, size=1, color="black") +
geom_bar(stat='identity', fill="grey", alpha=0.70 ) +
coord_flip() +
theme_bw()
SingPlot
combined_si <- totalSI %>%
full_join(singleSI, by=c("params"))
combined_si
paramBounds
paramBounds$value
paramBounds
paramBounds$Parameter
paramBounds$Parameter$tillfac_FT
paramBounds["Parameter"]$tillfac_FT
paramBounds["Parameter"]
paramBounds[["Parameter"]]
paramBounds[["Parameter"]][["tillfac_RT"]]
paramBounds[["Parameter"]]["tillfac_RT"]
paramBounds[["Parameter"]]["tillfac_FT"]
paramBounds[["Parameter"]]$tillfac_RT
paramBounds["Parameter"]$tillfac_RT
paramBounds[1,4]
paramBounds[1,5]
paramBounds[1,3]
paramBounds[1,2]
paramBounds[2,2]
source(here('icbm_holos_calculate_pet.r'))
source(here::here("calculate_re.r"))
source(here::here("icbm_calculate_re.r"))
here::i_am("icbm_calculate_re.r")
here::i_am("walkthrough_re.rmd")
source(here::here("icbm_calculate_re.r"))
source(here::here("re_functions.r"))
source(here::here("icbm_calculate_re.r"))
source(here::here("read_climate_data.r"))
source(here::here("read_climate_data.r"))
source(here::here("icbm_calculate_re.r"))
here::i_am("icbm_run.r")
View(modelled)
View(params_list)
source("ipcct2_run.r")
source("GSA/loglike.R")
#================================
# Global sensitivity analysis using Sobols method in R using sensitivity package
#================================
here::i_am("GSA.r")
?here::i_am
here::i_am("GSA/GSA.R")
source("GSA/loglike.r")
source("r/ipcct2_run.r")
source("r/loglike.r")
# read prior distribution from a csv file
# (Required columns: Parameter, value,
paramBounds <- read.csv("ipcct2_parameters_gsa.csv.csv", stringsAsFactors = FALSE)
# read prior distribution from a csv file
# (Required columns: Parameter, value,
paramBounds <- read.csv("ipcct2_parameters_gsa.csv", stringsAsFactors = FALSE)
here::i_am("walkthrough_icbm.rmd")
here::i_am("r/walkthrough_icbm.rmd")
source(here::here("icbm_calculate_re.r"))
# read site data
sitedata_all <- readr::read_csv("all_experiments_dummy.csv") %>%
left_join(polyids_all, by=c("latitude" = "Lat", "longitude" = "Long"))
here::i_am("r/walkthrough_icbm.rmd")
source(here::here("r/icbm_calculate_re.r"))
source(here::here("r/run_icbm_and_re.r"))
source(here::here("r/read_climate_data.r"))
here::i_am("r/walkthrough_icbm.rmd")
